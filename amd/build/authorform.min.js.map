{"version":3,"file":"authorform.min.js","sources":["../src/authorform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* jshint esversion: 6 */\n\n/**\n * JavaScript for handling UI actions in the question authoring form.\n *\n * @module qtype_coderunner/authorform\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['qtype_coderunner/userinterfacewrapper', 'core/str'], function(ui, str) {\n\n    // We need this to keep track of the current question type.\n    let currentQtype = \"\";\n\n    // Define a mapping from the fields of the JSON object returned by an AJAX\n    // 'get question type' request to the form elements. Only fields that\n    // belong to the question type should appear here. Keys are JSON field\n    // names, values are a 3- or 4-element array of: a form element selector;\n    // the element property to be set; a default value if the JSON field is\n    // empty and an optional filter function to apply to the field value before\n    // setting the property with it.\n    var JSON_TO_FORM_MAP = {\n        template:            ['#id_template', 'value', ''],\n        iscombinatortemplate:['#id_iscombinatortemplate', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],  // Need nice clean boolean for 'checked' attribute.\n        cputimelimitsecs:    ['#id_cputimelimitsecs', 'value', ''],\n        memlimitmb:          ['#id_memlimitmb', 'value', ''],\n        sandbox:             ['#id_sandbox', 'value', 'DEFAULT'],\n        sandboxparams:       ['#id_sandboxparams', 'value', ''],\n        testsplitterre:      ['#id_testsplitterre', 'value', '',\n                                function (splitter) {\n                                    return splitter.replace('\\n', '\\\\n');\n                                }],\n        allowmultiplestdins: ['#id_allowmultiplestdins', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],\n        grader:              ['#id_grader', 'value', 'EqualityGrader'],\n        resultcolumns:       ['#id_resultcolumns', 'value', ''],\n        language:            ['#id_language', 'value', ''],\n        acelang:             ['#id_acelang', 'value', ''],\n        uiplugin:            ['#id_uiplugin', 'value', 'ace']\n    };\n\n    /**\n     * Set up the author edit form UI plugins and event handlers.\n     * The template parameters and Ace language are passed to each\n     * text area from PHP by setting its data-params and\n     * data-lang attributes.\n     */\n    function initEditForm() {\n        var typeCombo = document.getElementById('id_coderunnertype'),\n            prototypeDisplay = document.getElementById('id_isprototype'),\n            template = document.getElementById('id_template'),\n            evaluatePerStudent = document.getElementById('id_templateparamsevalpertry'),\n            globalextra = document.getElementById('id_globalextra'),\n            prototypeextra = document.getElementById('id_prototypeextra'),\n            useace = document.getElementById('id_useace'),\n            language = document.getElementById('id_language'),\n            acelang = document.getElementById('id_acelang'),\n            customise = document.getElementById('id_customise'),\n            isCombinator = document.getElementById('id_iscombinatortemplate'),\n            testSplitterRe = document.getElementById('id_testsplitterre'),\n            allowMultipleStdins = document.getElementById('id_allowmultiplestdins'),\n            customisationFieldSet = document.getElementById('id_customisationheader'),\n            advancedCustomisation = document.getElementById('id_advancedcustomisationheader'),\n            isCustomised = customise.checked,\n            prototypeType = document.getElementById('id_prototypetype'),\n            preloadHdr = document.getElementById('id_answerpreloadhdr'),\n            courseIdInput = document.querySelector('input[name=\"courseid\"]'),\n            courseId = courseIdInput ? courseIdInput.value : '',\n            questiontypeHelpDiv = document.getElementById('qtype-help'),\n            precheck = document.querySelector('select#id_precheck'),\n            testtypedivs = document.querySelectorAll('div.testtype'),\n            testsection = document.getElementById('id_testcasehdr'),\n            brokenQuestion = document.getElementById('id_broken_question'),\n            badQuestionLoad = document.getElementById('id_bad_question_load'),\n            uiplugin = document.getElementById('id_uiplugin'),\n            uiparameters = document.getElementById('id_uiparameters');\n\n        /**\n         * Set up the UI controller for a given textarea (one of template,\n         * answer or answerpreload).\n         * We don't attempt to process changes in template parameters,\n         * as these need to be merged with those of the prototype. But we do handle\n         * changes in the language.\n         * @param {string} taId The ID of the textarea element.\n         * @param {string} uiname The name of the UI controller (may be empty or none).\n         */\n        function setUi(taId, uiname) {\n            var ta = document.getElementById(taId),\n                lang,\n                paramsJson = ta.getAttribute('data-params'),    // Ui params set by PHP.\n                params = {},\n                uiWrapper,\n                testcode0 = document.getElementById('id_testcode_0');\n\n            // Set data attributes in the text area for UI components that need\n            // global extra or testcase data (e.g. gapfiller UI).\n            ta.setAttribute('data-prototypeextra', prototypeextra.value);\n            ta.setAttribute('data-globalextra', globalextra.value);\n            ta.setAttribute('data-test0', testcode0 ? testcode0.value : '');\n            try {\n                params = paramsJson ? JSON.parse(paramsJson) : {};\n            } catch(err) {}\n            uiname = uiname.toLowerCase();\n            if (uiname === 'none') {\n                uiname = '';\n            }\n\n            if (taId == 'id_templateparams' || taId == 'id_uiparameters') {\n                lang = ''; // These fields may be twigged, so can't be parsed by Ace.\n            } else {\n                lang = language.value;\n                if (taId !== \"id_template\" && acelang.value) {\n                    lang = preferredAceLang(acelang.value);\n                }\n            }\n\n            uiWrapper = ta.current_ui_wrapper; // Currently-active UI wrapper on this ta.\n\n            ta.setAttribute('data-lang', lang);\n\n            if (!uiWrapper) {\n                uiWrapper = new ui.InterfaceWrapper(uiname, taId);\n            } else {\n                // Wrapper has already been set up - just reload the reqd UI.\n                params.lang = lang;\n                uiWrapper.loadUi(uiname, params);\n            }\n\n        }\n\n        /**\n         * Set the correct Ui controller on both the sample answer and the answer preload.\n         * The sample answer and answer preload have the data-params attribute which contains\n         * the UI params in a JSON from the current question merged with the prototype.\n         * Both of them are identical and are changed simultaneously; only checking\n         * answer as state is identical.\n         * As a special case, we don't turn on the Ui controller in the answer\n         * and answer preload fields when using Html-Ui and the ui-parameter\n         * enable_in_editor is false.\n         *\n         */\n        function setUis() {\n            let uiname = uiplugin.value;\n            let answer = document.getElementById('id_answer');\n            let enableUi = true;\n            if (uiname === 'html' && answer.getAttribute('data-params') !== '') {\n                try {\n                    let answerparams = JSON.parse(answer.getAttribute('data-params'));\n                    if (answerparams.enable_in_editor === false) {\n                        enableUi = false;\n                    }\n                } catch (error) {\n                    alert(\"Invalid UI parameters.\");\n                }\n            }\n            if (enableUi) {\n                setUi('id_answer', uiname);\n                setUi('id_answerpreload', uiname);\n            }\n        }\n\n        /**\n         * Display or Hide all customisation parts of the form.\n         * @param {bool} isVisible True to show, false to hide.\n         */\n        function setCustomisationVisibility(isVisible) {\n            var display = isVisible ? 'block' : 'none';\n            customisationFieldSet.style.display = display;\n            advancedCustomisation.style.display = display;\n            if (isVisible && useace.checked) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n\n        /**\n         * Turn on or off the Ace editor in the template and uiparameters fields\n         * so we can reload the textareas with JavaScript.\n         * Ignore if UseAce is unchecked.\n         * @param {bool} stateOn True to stop Ace, false to restart it.\n         */\n        function enableAceInCustomisedFields(stateOn) {\n            var taIds = ['id_template', 'id_uiparameters'];\n            var uiWrapper, ta;\n            if (useace.checked) {\n                for(var i = 0; i < taIds.length; i++) {\n                    ta = document.getElementById(taIds[i]);\n                    uiWrapper = ta.current_ui_wrapper;\n                    if (uiWrapper && stateOn) {\n                        uiWrapper.restart();\n                    } else if (uiWrapper && !stateOn) {\n                        uiWrapper.stop();\n                    }\n                }\n            }\n        }\n\n\n        /**\n         * After loading the form with new question type data we have to\n         * enable or disable both the testsplitterre and the allow multiple\n         * stdins field. These are subsequently enabled/disabled via event handlers\n         * set up by code in edit_coderunner_form.php (q.v.) but those event\n         * handlers do not handle the freshly downloaded state.\n         */\n        function enableTemplateSupportFields() {\n            var isCombinatorEnabled = isCombinator.checked;\n\n            testSplitterRe.disabled = !isCombinatorEnabled;\n            allowMultipleStdins.disabled = !isCombinatorEnabled;\n        }\n\n        /**\n         * Copy fields from the AJAX \"get question type\" response into the form.\n         * @param {string} newType the newly selected question type.\n         * @param {object} response The AJAX resopnse.\n         */\n        function copyFieldsFromQuestionType(newType, response) {\n            var formspecifier, attrval, filter;\n\n            enableAceInCustomisedFields(false);\n            for (var key in JSON_TO_FORM_MAP) {\n                formspecifier = JSON_TO_FORM_MAP[key];\n                attrval = response[key] ? response[key] : formspecifier[2];\n                if (formspecifier.length > 3) {\n                    filter = formspecifier[3];\n                    attrval = filter(attrval);\n                }\n                const element = document.querySelector(formspecifier[0]);\n                if (element) {\n                    if (formspecifier[1] === 'checked') {\n                        element.checked = attrval;\n                    } else {\n                        element[formspecifier[1]] = attrval;\n                    }\n                }\n            }\n\n            customise.checked = false;\n            str.get_string('coderunner_question_type', 'qtype_coderunner').then(function (s) {\n                questiontypeHelpDiv.innerHTML = detailsHtml(newType, s, response.questiontext);\n            });\n\n            setCustomisationVisibility(false);\n            enableTemplateSupportFields();\n        }\n\n        /**\n         * A JSON request for a question type returned a 'failure' response - probably a\n         * missing question type. Report the error with an alert, and replace\n         * the template contents with an error message in case the user\n         * saves the question and later wonders why it breaks.\n         * Returns the JSON error object for further use.\n         * @param {string} questionType The CodeRunner (sub) question type.\n         * @param {string} error The error message as JSON encoded error => langstring,\n         * extra => components string.\n         * @return {JSON object} The JSON error object for further parsing.\n         */\n        function reportError(questionType, error) {\n            const errorObject = JSON.parse(error);\n            str.get_string('prototype_error', 'qtype_coderunner').then(function(s) {\n                str.get_string(errorObject.alert, 'qtype_coderunner', questionType).then(function(str) {\n                    langStringAlert('prototype_load_failure', str);\n                    let errorMessage = s + \"\\n\";\n                    errorMessage += str + '\\n';\n                    errorMessage += \"CourseId: \" + courseId + \", qtype: \" + questionType;\n                    template.value = errorMessage;\n                });\n            });\n            return errorObject;\n        }\n\n        /**\n         * Local function to return the HTML to display in the\n         * question type details section of the form.\n         * @param {string} title The type of the question being described.\n         * @param {string} coderunner_descr The language string to introduce\n         * the detail.\n         * @param {html} html The HTML description of the question type, namely\n         * the question text from its prototype.\n         * @return {html} The composite HTML describing the question type.\n         */\n        function detailsHtml(title, coderunner_descr, html) {\n\n            var resultHtml = '<p class=\"question-type-details-header\">';\n            resultHtml += coderunner_descr;\n            resultHtml += title + '</p>\\n' + html;\n            return resultHtml;\n        }\n\n        /**\n         * Raise an alert with the given language string and possible additional\n         * extra text.\n         * @param {string} key The language string to put in the Alert.\n         * @param {string} extra Extra text to append.\n         */\n        function langStringAlert(key, extra) {\n            if (window.hasOwnProperty('behattesting') && window.behattesting) {\n                return;\n            }\n            str.get_string(key, 'qtype_coderunner').then(function(s) {\n                var message = s.replace(/\\n/g, \" \");\n                if (extra) {\n                    message += '\\n' + extra;\n                }\n                alert(message);\n            });\n        }\n\n        /**\n         * Get the \"preferred language\" from the AceLang string supplied.\n         * @param {string} acelang The AceLang string.\n         * For multilanguage questions, this is either the default (i.e.,\n         * the language with a '*' suffix), or the first language. Otherwise\n         * it is simply the entire AceLang string.\n         * @return {string} The language to pass to Ace for syntax highlighting.\n         */\n        function preferredAceLang(acelang) {\n            var langs, i;\n            if (acelang.indexOf(',') < 0) {\n                return acelang;\n            } else {\n                langs = acelang.split(',');\n                for (i = 0; i < langs.length; i++) {\n                    if (langs[i].endsWith('*')) {\n                        return langs[i].substring(0, langs[i].length - 1);\n                    }\n                }\n                return langs.length > 0 ? langs[0] : '';\n            }\n        }\n\n        /**\n         * Load the various customisation fields into the form from the\n         * CodeRunner question type currently selected by the combobox.\n         * Looks at the preexisting type of the selected field.\n         */\n        function loadCustomisationFields() {\n            let newType = typeCombo.options[typeCombo.selectedIndex].text;\n\n            if (newType !== '' && newType !== 'Undefined') {\n                // Prevent 'Undefined' ever being reselected.\n                if (typeCombo.options[0]) {\n                    typeCombo.options[0].disabled = true;\n                }\n\n                // Load question type with fetch.\n                const url = new URL(M.cfg.wwwroot + '/question/type/coderunner/ajax.php');\n                url.searchParams.set('qtype', newType);\n                url.searchParams.set('courseid', courseId);\n                url.searchParams.set('sesskey', M.cfg.sesskey);\n\n                fetch(url)\n                    .then(response => response.json())\n                    .then(outcome => {\n                        // Clean all warnings regardless.\n                        const warningDiv = document.getElementById('id_qtype_coderunner_warning_div');\n                        if (warningDiv) {\n                            warningDiv.innerHTML = '';\n                        }\n                        if (outcome.success) {\n                            copyFieldsFromQuestionType(newType, outcome);\n                            setUis();\n                            loadUiParametersDescription();\n                            // Success, so remove the errors and change the current Qtype.\n                            currentQtype = newType;\n                            const errorDiv = document.getElementById('id_qtype_coderunner_error_div');\n                            if (errorDiv) {\n                                errorDiv.innerHTML = '';\n                            }\n                        }\n                        else {\n                            const errorObject = reportError(newType, outcome.error);\n                            // Checks to see if there has been a change in type from last saved.\n                            // If so, put up a load error and keep type unchanged.\n                            if (currentQtype !== newType && errorObject.error === 'duplicateprototype') {\n                                showLoadTypeError(currentQtype, errorObject, newType);\n                                typeCombo.value = currentQtype;\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        // AJAX failed. We're dead, Fred. The attempt to get the\n                        // language translation for the error message will likely\n                        // fail too, so use English for a start.\n                        langStringAlert('error_loading_prototype');\n                        template.value = '*** AJAX ERROR. DON\\'T SAVE THIS! ***';\n                        str.get_string('ajax_error', 'qtype_coderunner').then(function(s) {\n                            template.value = s;  // Translates into current language (if it works).\n                    });\n                });\n            }\n        }\n\n        /**\n         * Build an HTML table describing all the UI parameters.\n         * @param {object} uiParamInfo The object describing the parameters\n         * for a particular UI.\n         * @return {string} An HTML table describing each UI parameter.\n         */\n        function UiParameterDescriptionTable(uiParamInfo) {\n            var html = '<table class=\"uiparamtable\">\\n',\n                hdrs = uiParamInfo.columnheaders, param, i;\n            html += \"<tr><th>\" + hdrs[0] + \"</th><th>\" + hdrs[1] + \"</th><th>\" + hdrs[2] + \"</th></tr>\\n\";\n            for (i = 0; i < uiParamInfo.uiparamstable.length; i++) {\n                param = uiParamInfo.uiparamstable[i];\n                html += \"<tr><td>\" + param[0] + \"</td><td>\" + param[1] + \"</td><td>\" + param[2] + \"</td></tr>\\n\";\n            }\n            html += \"</table>\\n\";\n            return html;\n        }\n\n\n\n        /**\n         * Plug the UI info received by getJSON into the author form.\n         * @param {object} uiInfo The response data from the getJSON call\n         * @returns {undefined}\n         */\n        function updateUiParamsDescription(uiInfo) {\n            let currentuiparameters = uiparameters.value;\n            let paramDescriptionDiv = document.querySelector('.ui_parameters_descr');\n            let uiParamGroup = document.getElementById('fgroup_id_uiparametergroup');\n            uiParamGroup.style.display = '';\n            paramDescriptionDiv.innerHTML = '';\n\n            if (uiInfo === null || (uiInfo.uiparamstable.length == 0 && currentuiparameters.trim() === '')) {\n                uiParamGroup.style.display = 'none';\n            } else {\n                paramDescriptionDiv.append(uiInfo.header);\n                let showhidebutton = document.createElement('button');\n                showhidebutton.type = 'button';\n                showhidebutton.className = 'toggleuidetails';\n                showhidebutton.textContent = uiInfo.showdetails;\n                if (uiInfo.uiparamstable.length != 0) {\n                    paramDescriptionDiv.append(showhidebutton);\n                    let tableDiv = document.createElement('div');\n                    tableDiv.className = 'uiparamtablediv';\n                    tableDiv.innerHTML = UiParameterDescriptionTable(uiInfo);\n                    paramDescriptionDiv.append(tableDiv);\n                    tableDiv.style.display = 'none';\n                    showhidebutton.addEventListener('click', function () {\n                        if (showhidebutton.textContent == uiInfo.showdetails) {\n                            tableDiv.style.display = 'block';\n                            showhidebutton.textContent = uiInfo.hidedetails;\n                        } else {\n                            tableDiv.style.display = 'none';\n                            showhidebutton.textContent = uiInfo.showdetails;\n                        }\n                    });\n                }\n                if (useace.checked) {\n                    setUi('id_uiparameters', 'ace');\n                }\n            }\n        }\n\n        /**\n         * Load the UI parameter description field by Ajax initially or\n         * when the UI plugin is changed.\n         */\n        function loadUiParametersDescription() {\n            let newUi = uiplugin.options[uiplugin.selectedIndex].text;\n            if (newUi === '' || newUi === 'none') {\n                updateUiParamsDescription(null);\n            } else {\n                const url = new URL(M.cfg.wwwroot + '/question/type/coderunner/ajax.php');\n                url.searchParams.set('uiplugin', newUi);\n                url.searchParams.set('courseid', courseId);\n                url.searchParams.set('sesskey', M.cfg.sesskey);\n\n                fetch(url)\n                    .then(response => response.json())\n                    .then(updateUiParamsDescription)\n                    .catch(() => {\n                        // AJAX failed.\n                        langStringAlert('error_loading_ui_descr', `UI: ${newUi}`);\n                    });\n            }\n        }\n\n        /**\n         * Show/hide all testtype divs in the testcases according to the\n         * 'Precheck' selector.\n         */\n        function set_testtype_visibilities() {\n            if (precheck.value === '3') { // Show only for case of 'Selected'.\n                testtypedivs.forEach(div => {\n                    div.style.display = 'block';\n                });\n            } else {\n                testtypedivs.forEach(div => {\n                    div.style.display = 'none';\n                });\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the answer and\n         * answer preload fields.\n         */\n        function check_ace_lang() {\n            if (uiplugin.value === 'ace'){\n                setUis();\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the template,\n         * if template_uses_ace is checked.\n         */\n        function check_template_lang() {\n            if (useace.checked) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n        /**\n         * If the brokenquestionmessage hidden element is not empty, insert the\n         * given message as an error at the top of the question.\n         * itself to go back to the last valid value.\n         */\n        function checkForBrokenQuestion() {\n            let brokenQuestionMessage = brokenQuestion.value,\n                messagePara = null;\n            if (brokenQuestionMessage !== '') {\n                messagePara = document.createElement('p');\n                messagePara.textContent = brokenQuestion.value;\n                document.getElementById('id_qtype_coderunner_error_div').appendChild(messagePara);\n            }\n        }\n\n        /**\n         * Shows the load type error of the selected type if the selected type is\n         * faulty.\n         * @param {string} currentType The current type with its errors.\n         * @param {JSON Object} errorObject The JSON object containing a list of all the errors.\n         * @param {string} newType The new type string which it failed to load.\n         */\n        function showLoadTypeError(currentType, errorObject, newType) {\n            str.get_string('loadprototypeerror', 'qtype_coderunner',\n                { oldtype : currentType, crtype : newType, outputstring : errorObject.extras })\n                      .then(function(str) {\n                let warningPara = document.createElement('p');\n                warningPara.textContent = str;\n                document.getElementById('id_qtype_coderunner_warning_div').appendChild(warningPara);\n            });\n        }\n\n        /*************************************************************\n         *\n         * Body of initEditFormWhenReady starts here.\n         *\n         *************************************************************/\n\n        if (prototypeType.value != 0) {\n            // Display the prototype warning if it's a prototype and hide testboxes.\n            testsection.style.display = 'none';\n            prototypeDisplay.removeAttribute('hidden');\n            if (prototypeType.value == 1) {\n                // Editing a built-in question type: Dangerous!\n                str.get_string('proceed_at_own_risk', 'qtype_coderunner').then(function(s) {\n                    alert(s);\n                });\n                prototypeType.disabled = true;\n                customise.disabled = true;\n            }\n        }\n\n        checkForBrokenQuestion();\n        badQuestionLoad.hidden = true; // Until we check it once.\n        // Keep track of the current prototype loaded.\n        currentQtype = typeCombo.options[typeCombo.selectedIndex].text;\n\n        setCustomisationVisibility(isCustomised);\n        if (!isCustomised) {\n            // Not customised so have to load fields from prototype.\n            loadCustomisationFields();  // setUis is called when this completes.\n        } else {\n            setUis();  // Set up UI controllers on answer and answerpreload.\n            str.get_string('info_unavailable', 'qtype_coderunner').then(function(s) {\n                questiontypeHelpDiv.innerHTML = \"<p>\" + s + \"</p>\";\n            });\n        }\n\n        set_testtype_visibilities();\n\n        if (useace.checked) {\n            setUi('id_templateparams', 'ace');\n            setUi('id_uiparameters', 'ace');\n        }\n\n        loadUiParametersDescription();\n\n        // Set up event Handlers.\n\n        customise.addEventListener('change', function() {\n            let isCustomised = customise.checked;\n            if (isCustomised) {\n                // Customisation is being turned on.\n                setCustomisationVisibility(true);\n            } else { // Customisation being turned off.\n                str.get_string('confirm_proceed', 'qtype_coderunner').then(function(s) {\n                    if (window.confirm(s)) {\n                        setCustomisationVisibility(false);\n                    } else {\n                        customise.checked = true;\n                    }\n                });\n            }\n        });\n\n        acelang.addEventListener('change', check_ace_lang);\n        language.addEventListener('change', function() {\n            check_template_lang();\n            check_ace_lang();\n        });\n\n        typeCombo.addEventListener('change', function() {\n            if (customise.checked) {\n                // Author has customised the question. Ask if they want to reload inherited stuff.\n                str.get_string('question_type_changed', 'qtype_coderunner').then(function (s) {\n                    if (window.confirm(s)) {\n                        loadCustomisationFields();\n                    }\n                });\n            } else {\n                loadCustomisationFields();\n            }\n        });\n\n        useace.addEventListener('change', function() {\n            var isTurningOn = useace.checked;\n            if (isTurningOn) {\n                setUi('id_template', 'ace');\n                setUi('id_templateparams', 'ace');\n                setUi('id_uiparameters', 'ace');\n            } else {\n                setUi('id_template', '');\n                setUi('id_templateparams', '');\n                setUi('id_uiparameters', '');\n            }\n        });\n\n        evaluatePerStudent.addEventListener('change', function() {\n            if (evaluatePerStudent.checked) {\n                langStringAlert('templateparamsusingsandbox');\n            }\n        });\n\n        uiplugin.addEventListener('change', function () {\n            setUis();\n            loadUiParametersDescription();\n        });\n\n        precheck.addEventListener('change', set_testtype_visibilities);\n\n        // Displays and hides the reason for the question type to be disabled.\n        // Also hides/shows the test cases section if prototype/not prototype.\n        prototypeType.addEventListener('change', function () {\n            if (prototypeType.value == '0') {\n                testsection.style.display = 'block';\n                prototypeDisplay.setAttribute('hidden', '1');\n            } else {\n                testsection.style.display = 'none';\n                prototypeDisplay.removeAttribute('hidden');\n            }\n        });\n\n        // In order to initialise the Ui plugin when the answer preload section is\n        // expanded, we monitor attribute mutations in the Answer Preload\n        // header.\n        var observer = new MutationObserver( function () {\n            setUis();\n        });\n        if (preloadHdr) {\n            observer.observe(preloadHdr, {'attributes': true, 'attributeFilter':['class']});\n        }\n\n        // Setup click handler for the buttons that allow users to replace the\n        // expected output  with the output got from testing the answer program.\n        document.addEventListener('click', function(event) {\n            if (event.target.matches('button.replaceexpectedwithgot')) {\n                var gotPre = event.target.previousElementSibling;\n                while (gotPre && (!gotPre.matches('pre') || !gotPre.id.startsWith('id_got_'))) {\n                    gotPre = gotPre.previousElementSibling;\n                }\n                if (gotPre) {\n                    var testCaseId = gotPre.id.replace('id_got_', '');\n                    var expectedField = document.getElementById('id_expected_' + testCaseId);\n                    var expectedFailField = document.getElementById('id_fail_expected_' + testCaseId);\n                    var failRow = document.querySelector('.failrow_' + testCaseId);\n\n                    if (expectedField) {\n                        expectedField.value = gotPre.textContent;\n                    }\n                    if (expectedFailField) {\n                        expectedFailField.innerHTML = gotPre.textContent;\n                    }\n                    if (failRow) {\n                        failRow.classList.add('fixed');\n                    }\n                    event.target.disabled = true;\n                }\n            }\n        });\n\n        // On reloading the page, enable the typeCombo so that its value is POSTed.\n        document.addEventListener('click', function(event) {\n            if (event.target.matches('.btn-primary')) {\n                typeCombo.disabled = false;\n            }\n        });\n    }\n\n    return {initEditForm: initEditForm};\n});\n"],"names":["define","ui","str","currentQtype","JSON_TO_FORM_MAP","template","iscombinatortemplate","value","cputimelimitsecs","memlimitmb","sandbox","sandboxparams","testsplitterre","splitter","replace","allowmultiplestdins","grader","resultcolumns","language","acelang","uiplugin","initEditForm","typeCombo","document","getElementById","prototypeDisplay","evaluatePerStudent","globalextra","prototypeextra","useace","customise","isCombinator","testSplitterRe","allowMultipleStdins","customisationFieldSet","advancedCustomisation","isCustomised","checked","prototypeType","preloadHdr","courseIdInput","querySelector","courseId","questiontypeHelpDiv","precheck","testtypedivs","querySelectorAll","testsection","brokenQuestion","badQuestionLoad","uiparameters","setUi","taId","uiname","lang","uiWrapper","ta","paramsJson","getAttribute","params","testcode0","setAttribute","JSON","parse","err","toLowerCase","langs","i","indexOf","split","length","endsWith","substring","preferredAceLang","current_ui_wrapper","loadUi","InterfaceWrapper","setUis","answer","enableUi","enable_in_editor","error","alert","setCustomisationVisibility","isVisible","display","style","copyFieldsFromQuestionType","newType","response","formspecifier","attrval","isCombinatorEnabled","key","stateOn","taIds","restart","stop","enableAceInCustomisedFields","filter","element","get_string","then","s","title","coderunner_descr","html","resultHtml","innerHTML","questiontext","disabled","langStringAlert","extra","window","hasOwnProperty","behattesting","message","loadCustomisationFields","options","selectedIndex","text","url","URL","M","cfg","wwwroot","searchParams","set","sesskey","fetch","json","outcome","warningDiv","success","loadUiParametersDescription","errorDiv","errorObject","questionType","errorMessage","reportError","currentType","oldtype","crtype","outputstring","extras","warningPara","createElement","textContent","appendChild","showLoadTypeError","catch","updateUiParamsDescription","uiInfo","currentuiparameters","paramDescriptionDiv","uiParamGroup","uiparamstable","trim","append","header","showhidebutton","type","className","showdetails","tableDiv","uiParamInfo","param","hdrs","columnheaders","UiParameterDescriptionTable","addEventListener","hidedetails","newUi","set_testtype_visibilities","forEach","div","check_ace_lang","removeAttribute","messagePara","checkForBrokenQuestion","hidden","confirm","observer","MutationObserver","observe","event","target","matches","gotPre","previousElementSibling","id","startsWith","testCaseId","expectedField","expectedFailField","failRow","classList","add"],"mappings":"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"}