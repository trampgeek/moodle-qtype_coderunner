{"version":3,"file":"ui_html.min.js","sources":["../src/ui_html.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the html_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing the author-supplied HTML. The serialisation of that HTML,\n * which is what is essentially copied back into the textarea for submissions\n * as the answer, is a JSON object. The fields of that object are the names\n * of all author-supplied HTML elements with a class 'coderunner-ui-element';\n * all such objects are expected to have a 'name' attribute as well. The\n * associated field values are lists. Each list contains all the values, in\n * document order, of the results of calling the jquery val() method in turn\n * on each of the UI elements with that name.\n * This means that at least input, select and textarea\n * elements are supported. The author is responsible for checking the\n * compatibility of other elements with jquery's val() method.\n *\n * The HTML to use in the answer area must be provided as the contents of\n * either the globalextra field or the prototypeextra field in the question\n * authoring form. The choice of which is set by the html_src UI parameter, which\n * must be either 'globalextra' or 'prototypeextra'.\n *\n * If any fields of the answer html are to be preloaded, these should be specified\n * in the answer preload with json of the form '{\"<fieldName>\": \"<fieldValueList>\",...}'\n * where fieldValueList is a list of all the values to be assigned to the fields\n * with the given name, in document order.\n *\n * To accommodate the possibility of dynamic HTML, any leftover preload values,\n * that is, values that cannot be positioned within the HTML either because\n * there is no field of the required name or because, in the case of a list,\n * there are insufficient elements, are assigned to the data['leftovers']\n * attribute of the outer html div, as a sub-object of the original object.\n * This outer div can be located as the 'closest' (in a jQuery sense)\n * div.qtype-coderunner-html-outer-div. The author-supplied HTML must include\n * JavaScript to make use of the 'leftovers'.\n *\n * As a special case of the serialisation, if all values in the serialisation\n * are either empty strings or a list of empty strings, the serialisation is\n * itself the empty string.\n *\n * @module coderunner/ui_html\n * @copyright  Richard Lobb, 2018, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n    /**\n     * Constructor for the HtmlUi object.\n     * @param {string} textareaId The ID of the html textarea.\n     * @param {int} width The width in pixels of the textarea.\n     * @param {int} height The height in pixels of the textarea.\n     * @param {object} uiParams The UI parameter object.\n     */\n    function HtmlUi(textareaId, width, height, uiParams) {\n        this.textArea = $(document.getElementById(textareaId));\n        this.textareaId = textareaId;\n        var srcField = uiParams.html_src || 'globalextra';\n        this.html = this.textArea.attr('data-' + srcField);\n        this.html = this.html.replace(/___textareaId___/gm, textareaId);\n        this.readOnly = this.textArea.prop('readonly');\n        this.uiParams = uiParams;\n        this.fail = false;\n        this.htmlDiv = null;\n        this.reload();\n    }\n\n    HtmlUi.prototype.failed = function() {\n        return this.fail;\n    };\n\n\n    HtmlUi.prototype.failMessage = function() {\n        return 'htmluiloadfail';\n    };\n\n\n    // Copy the serialised version of the HTML UI area to the TextArea.\n    HtmlUi.prototype.sync = function() {\n        var\n            serialisation = {},\n            name,\n            empty = true;\n\n        this.getFields().each(function() {\n            var value, type;\n            type = $(this).attr('type');\n            name = $(this).attr('name');\n            if ((type === 'checkbox' || type === 'radio') && !($(this).is(':checked'))) {\n                value = '';\n            } else {\n                value = $(this).val();\n            }\n            if (serialisation.hasOwnProperty(name)) {\n                serialisation[name].push(value);\n            } else {\n                serialisation[name] = [value];\n            }\n            if (value !== '') {\n                empty = false;\n            }\n        });\n        if (empty) {\n            this.textArea.val('');\n        } else {\n            this.textArea.val(JSON.stringify(serialisation));\n        }\n    };\n\n\n    HtmlUi.prototype.getElement = function() {\n        return this.htmlDiv;\n    };\n\n    HtmlUi.prototype.getFields = function() {\n        return $(this.htmlDiv).find('.coderunner-ui-element');\n    };\n\n    // Set the value of the jQuery field to the given value.\n    // If the field is a radio button or a checkbox and its name matches\n    // the given value, the checked attribute is set. Otherwise the field's\n    // val() function is called to set the value.\n    HtmlUi.prototype.setField = function(field, value) {\n        if (field.attr('type') === 'checkbox' || field.attr('type') === 'radio') {\n            field.prop('checked', field.val() === value);\n        } else {\n            field.val(value);\n        }\n    };\n\n    HtmlUi.prototype.reload = function() {\n        var\n            content = $(this.textArea).val(), // JSON-encoded HTML element settings.\n            valuesToLoad,\n            values,\n            i,\n            fields,\n            leftOvers,\n            outerDivId = 'qtype-coderunner-outer-div-' + this.textareaId,\n            outerDiv = \"<div style='height:fit-content' class='qtype-coderunner-html-outer-div' id='\" + outerDivId + \"'>\";\n\n        this.htmlDiv = $(outerDiv + this.html + \"</div>\");\n        this.htmlDiv.data('uiparams', this.uiParams);       // For use by  scripts embedded in html.\n        this.htmlDiv.data('templateparams', this.uiParams); // Legacy support only. DEPRECATED.\n        if (content) {\n            try {\n                valuesToLoad = JSON.parse(content);\n                leftOvers = {};\n                for (var name in valuesToLoad) {\n                    values = valuesToLoad[name];\n                    fields = this.getFields().filter(\"[name='\" + name + \"']\");\n                    leftOvers[name] = [];\n                    for (i = 0; i < values.length; i++) {\n                        if (i < fields.length) {\n                            this.setField($(fields[i]), values[i]);\n                        } else {\n                            leftOvers[name].push(values[i]);\n                        }\n                    }\n                    if (leftOvers[name].length === 0) {\n                        delete leftOvers[name];\n                    }\n                }\n\n                if (!$.isEmptyObject(leftOvers)) {\n                    this.htmlDiv.attr('data-leftovers', JSON.stringify(leftOvers));\n                }\n\n            } catch(e) {\n                this.fail = true;\n            }\n        }\n    };\n\n    HtmlUi.prototype.resize = function() {}; // Nothing to see here. Move along please.\n\n    HtmlUi.prototype.hasFocus = function() {\n        var  focused = false;\n        this.getFields().each(function() {\n            if (this === document.activeElement) {\n                focused = true;\n            }\n        });\n        return focused;\n    };\n\n    // Destroy the HTML UI and serialise the result into the original text area.\n    HtmlUi.prototype.destroy = function() {\n        this.sync();\n        $(this.htmlDiv).remove();\n        this.htmlDiv = null;\n    };\n\n    return {\n        Constructor: HtmlUi\n    };\n});\n"],"names":["define","$","HtmlUi","textareaId","width","height","uiParams","textArea","document","getElementById","srcField","html_src","html","this","attr","replace","readOnly","prop","fail","htmlDiv","reload","prototype","failed","failMessage","sync","name","serialisation","empty","getFields","each","value","type","is","val","hasOwnProperty","push","JSON","stringify","getElement","find","setField","field","valuesToLoad","values","i","fields","leftOvers","content","outerDiv","data","parse","filter","length","isEmptyObject","e","resize","hasFocus","focused","activeElement","destroy","remove","Constructor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DAA,kCAAO,CAAC,WAAW,SAASC,YAQfC,OAAOC,WAAYC,MAAOC,OAAQC,eAClCC,SAAWN,EAAEO,SAASC,eAAeN,kBACrCA,WAAaA,eACdO,SAAWJ,SAASK,UAAY,mBAC/BC,KAAOC,KAAKN,SAASO,KAAK,QAAUJ,eACpCE,KAAOC,KAAKD,KAAKG,QAAQ,qBAAsBZ,iBAC/Ca,SAAWH,KAAKN,SAASU,KAAK,iBAC9BX,SAAWA,cACXY,MAAO,OACPC,QAAU,UACVC,gBAGTlB,OAAOmB,UAAUC,OAAS,kBACfT,KAAKK,MAIhBhB,OAAOmB,UAAUE,YAAc,iBACpB,kBAKXrB,OAAOmB,UAAUG,KAAO,eAGhBC,KADAC,cAAgB,GAEhBC,OAAQ,OAEPC,YAAYC,MAAK,eACdC,MAAOC,KACXA,KAAO9B,EAAEY,MAAMC,KAAK,QACpBW,KAAOxB,EAAEY,MAAMC,KAAK,QAIhBgB,MAHU,aAATC,MAAgC,UAATA,MAAuB9B,EAAEY,MAAMmB,GAAG,YAGlD/B,EAAEY,MAAMoB,MAFR,GAIRP,cAAcQ,eAAeT,MAC7BC,cAAcD,MAAMU,KAAKL,OAEzBJ,cAAcD,MAAQ,CAACK,OAEb,KAAVA,QACAH,OAAQ,MAGZA,WACKpB,SAAS0B,IAAI,SAEb1B,SAAS0B,IAAIG,KAAKC,UAAUX,iBAKzCxB,OAAOmB,UAAUiB,WAAa,kBACnBzB,KAAKM,SAGhBjB,OAAOmB,UAAUO,UAAY,kBAClB3B,EAAEY,KAAKM,SAASoB,KAAK,2BAOhCrC,OAAOmB,UAAUmB,SAAW,SAASC,MAAOX,OACb,aAAvBW,MAAM3B,KAAK,SAAiD,UAAvB2B,MAAM3B,KAAK,QAChD2B,MAAMxB,KAAK,UAAWwB,MAAMR,QAAUH,OAEtCW,MAAMR,IAAIH,QAIlB5B,OAAOmB,UAAUD,OAAS,eAGlBsB,aACAC,OACAC,EACAC,OACAC,UALAC,QAAU9C,EAAEY,KAAKN,UAAU0B,MAO3Be,SAAW,gFADE,8BAAgCnC,KAAKV,YACuD,aAExGgB,QAAUlB,EAAE+C,SAAWnC,KAAKD,KAAO,eACnCO,QAAQ8B,KAAK,WAAYpC,KAAKP,eAC9Ba,QAAQ8B,KAAK,iBAAkBpC,KAAKP,UACrCyC,gBAIS,IAAItB,QAFTiB,aAAeN,KAAKc,MAAMH,SAC1BD,UAAY,GACKJ,aAAc,KAC3BC,OAASD,aAAajB,MACtBoB,OAAShC,KAAKe,YAAYuB,OAAO,UAAY1B,KAAO,MACpDqB,UAAUrB,MAAQ,GACbmB,EAAI,EAAGA,EAAID,OAAOS,OAAQR,IACvBA,EAAIC,OAAOO,YACNZ,SAASvC,EAAE4C,OAAOD,IAAKD,OAAOC,IAEnCE,UAAUrB,MAAMU,KAAKQ,OAAOC,IAGL,IAA3BE,UAAUrB,MAAM2B,eACTN,UAAUrB,MAIpBxB,EAAEoD,cAAcP,iBACZ3B,QAAQL,KAAK,iBAAkBsB,KAAKC,UAAUS,YAGzD,MAAMQ,QACCpC,MAAO,IAKxBhB,OAAOmB,UAAUkC,OAAS,aAE1BrD,OAAOmB,UAAUmC,SAAW,eACnBC,SAAU,cACV7B,YAAYC,MAAK,WACdhB,OAASL,SAASkD,gBAClBD,SAAU,MAGXA,SAIXvD,OAAOmB,UAAUsC,QAAU,gBAClBnC,OACLvB,EAAEY,KAAKM,SAASyC,cACXzC,QAAU,MAGZ,CACH0C,YAAa3D"}