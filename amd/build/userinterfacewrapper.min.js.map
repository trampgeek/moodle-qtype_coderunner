{"version":3,"file":"userinterfacewrapper.min.js","sources":["../src/userinterfacewrapper.js"],"sourcesContent":["/******************************************************************************\n *\n * This module provides a wrapper for user-interface modules, handling hiding\n * of the textArea that is being replaced by the UI element,\n * resizing of the UI component, and support of such usability functions as\n * ctrl-alt-M to disable/re-enable the entire user interface, including the\n * wrapper.\n *\n * @module coderunner/userinterfacewrapper\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * The InterfaceWrapper class is constructed either by Moodle PHP calls of\n * the form\n *\n * $PAGE->requires->js_call_amd($modulename, $functionname, $params)\n *\n * (e.g. from within render.php) or by JavaScript require calls, e.g. from\n * authorform.js when the question author changes UI type.\n *\n * The InterfaceWrapper provides:\n *\n * 1. A constructor InterfaceWrapper(uiname, textareaId) which\n *    hides the given text area, replaces it with a wrapper div (resizable in\n *    height by the user but with width resizing managed by changes in window\n *    width), created an instance of nameInstance as defined in the file\n *    ui_name.js (see below).\n *    params is a record containing the decoded value of\n *\n * 2. A stop() method that destroys the embedded UI and hides the wrapper.\n *\n * 3. A restart() method that shows the wrapper again and re-creates the prior\n *    embedded UI component within it.\n *\n * 4. A loadUi(uiname, params) method that kills any currently running UI element\n *    (if there is one) and (re)loads the specified one. The params parameter\n *    is a record that allows additional parameters to be passed in, such as\n *    those from the question's uiParams field and, in the case of the\n *    Ace UI, the 'lang' (language) that the editor is editing. This data\n *    is supplied by the PHP via the data-params attribute of the answer's\n *    base textarea.\n *\n * 5. Regular checking for any resizing of the wrapper, which are passed on to\n *    the embedded UI element's resize() method.\n *\n * 6. Monitoring of alt-ctrl-M key presses which toggle the visibility of the\n *    wrapper plus UI element and the syncronised textArea by calls to stop()\n *    and restart\n *\n * =========================================================================\n *\n * The embedded user-interface module must be defined in a JavaScript file\n * of the form ui_name.js which must define a class nameInstance with\n * the following functionality:\n *\n * 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON uiParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n *\n * 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n *\n * 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n *\n * 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n *\n * 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n *\n * 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n *\n * 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n *\n * 8. A hasFocus() method that returns true if the UI element has focus.\n *\n * 9. A syncIntervalSecs() method that returns the time interval between\n *    calls to the sync() method. 0 for no sync calls. The userinterfacewrapper\n *    provides all instances with a generic (base-class) version that returns\n *    the value of a UI parameter sync_interval_secs if given else uses the\n *    UI interface wrapper default (currently 5).\n *\n * 10. An allowFullScreen() method that returns True if the UI supports\n *    use of the full-screen button in the bottom right of the UI wrapper.\n *    Defaults to False if not implemented.\n *\n * 11. A setAllowFullScreen(allow) method that takes a boolean parameter that\n *    allows or disallows the use of full screening. This overrides the setting\n *    from the allowFullScreen() method and is provided to allow parent UIs\n *    such as Scratchpad to override the default settings of a child UI.\n *\n * The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n *\n *****************************************************************************/\n\n/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more util.details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n\ndefine(['core/templates', 'core/notification'], function(Templates, Notification) {\n    /**\n     * Constructor for a new user interface.\n     * @param {string} uiname The name of the interface element (e.g. ace, graph, etc)\n     * which should be in file ui_ace.js, ui_graph.js etc.\n     * @param {string} textareaId The id of the text area that the UI is to manage.\n     * The text area should have an attribute data-params, which is a\n     * JSON encoded record containing whatever additional parameters might\n     * be needed by the User interface. As a minimum it should contain all\n     * the parameters from the uiparameters field of\n     * the question so that question authors can pass in additional data\n     * such as whether graph edges are bidirectional or not in the case of\n     * the graph UI. Additionally the Ace editor requires a 'lang' field\n     * to specify what language the editor is editing.\n     * When the wrapper has been set up on a text area, the text area\n     * element has a reference, current_ui_wrapper, to the UI wrapper.\n     */\n    function InterfaceWrapper(uiname, textareaId) {\n        let t = this; // For use by embedded functions.\n\n        this.GUTTER = 16;  // Size of gutter at base of wrapper Node (pixels)\n        this.DEFAULT_SYNC_INTERVAL_SECS = 5;\n\n        this.uniqueId = Math.random();\n        const PIXELS_PER_ROW = 19;  // For estimating height of textareas.\n        const MAX_GROWN_ROWS = 50;  // Upper limit to artifically grown textarea rows.\n        const MIN_WRAPPER_HEIGHT = 50;\n        this.isFullScreenEnable = null;\n        this.taId = textareaId;\n        this.loadFailId = textareaId + '_loadfailerr';\n        this.textArea = document.getElementById(textareaId);\n        if (this.textArea.current_ui_wrapper) {\n            alert(`JavaScript error: multiple UIs on ${textareaId}!`);\n        }\n        const params = this.textArea.getAttribute('data-params');\n        if (params) {\n            this.uiParams = JSON.parse(params);\n        } else {\n            this.uiParams = {};\n        }\n        this.uiParams.lang = this.textArea.getAttribute('data-lang');\n        this.readOnly = this.textArea.readOnly;\n        this.isLoading = false;   // True if we're busy loading a UI element.\n        this.loadFailed = false;  // True if UI failed to initialise properly.\n        this.retries = 0;         // Number of failed attempts to load a UI component.\n\n        let h = this.textArea.clientHeight; // Just a first guess. Will be fine tuned in resize.\n\n        // Grow height if textarea contents warrant.\n        let content_lines = this.textArea.value.split('\\n').length;\n        let rows = this.textArea.rows;\n        if (content_lines > rows) {\n            // Allow reloaded text areas with lots of text to grow bigger, within limits.\n            rows = Math.min(content_lines, MAX_GROWN_ROWS);\n        }\n        h = Math.max(h, rows * PIXELS_PER_ROW, MIN_WRAPPER_HEIGHT);\n        this.textArea.style.height = h + 'px';\n        /**\n         * Construct a hidden empty wrapper div, inserted directly after the\n         * textArea, ready to contain the actual UI.\n         */\n        this.wrapperNode = document.createElement('div');\n        this.wrapperNode.id = `${this.taId}_wrapper`;\n        this.wrapperNode.classList.add('ui_wrapper', 'position-relative');\n        this.wrapperNode.uniqueId = this.uniqueId;\n        this.wrapperNode.style.display = 'none';\n        this.wrapperNode.style.resize = 'vertical';\n        this.wrapperNode.style.overflow = 'hidden';\n        this.wrapperNode.style.minHeight = h + \"px\";\n        this.wrapperNode.style.width = '100%';\n        this.wrapperNode.style.border = '1px solid darkgrey';\n        this.textArea.insertAdjacentElement('afterend', this.wrapperNode);\n\n        this.wLast = 0;  // Record last known width and height. See checkForResize().\n        this.hLast = 0;\n\n\n        /**\n         * Record a reference to this wrapper in the text area\n         * for use by external javascript that needs to interact with the\n         * wrapper, e.g. the multilanguage.js module.\n         */\n        this.textArea.current_ui_wrapper = this;\n\n        /**\n         * Load the UI into the wrapper (aysnchronous).\n         */\n        this.uiInstance = null;  // Defined by loadUi asynchronously\n        this.loadUi(uiname, this.uiParams);  // Load the required UI element\n\n        /**\n         * Add event handlers\n         */\n        const resizeObserver = new ResizeObserver(function () {\n            t.checkForResize();\n        });\n        resizeObserver.observe(this.wrapperNode);\n\n\n        window.addEventListener('resize', function() {\n            t.checkForResize();\n        });\n\n        const form = this.textArea.closest('form');\n        if (form) {  // There may not be a form, e.g. when reviewing a submission.\n            form.addEventListener('submit', function() {\n                if (t.uiInstance !== null) {\n                    t.uiInstance.sync();\n                }\n            });\n        }\n\n        document.body.addEventListener('keydown', function keyDown(e) {\n            if (e.key === 'm' && e.ctrlKey && e.altKey) {\n                // Before trying to handle ctrl-alt-m keypresses, make sure the\n                // current instance of the wrapper in the DOM is the same as\n                // when this event handler was created. This might not be\n                // the case when userinterface wrappers are nested.\n                const wrapper = document.getElementById(`${t.taId}_wrapper`);\n                if (!wrapper || wrapper.uniqueId !== t.uniqueId) {\n                    // This wrapper has apparently been killed. Stop listening.\n                    // Should now be garbage collectable, too.\n                    document.removeEventListener('keydown', keyDown);\n                } else if (t.uiInstance !== null || t.loadFailed) {\n                    t.stop();\n                } else {\n                    t.restart();        // Reactivate\n                }\n            }\n        });\n    }\n\n    /**\n     * Set the value of the allowFullScreen property.\n     * If the value is true, the fullscreen mode will be shown.\n     * If the value is false, the fullscreen will be hidden.\n     *\n     * @param {Boolean} enableFullScreen The value to set.\n     */\n    InterfaceWrapper.prototype.setAllowFullScreen = function(enableFullScreen) {\n        this.isFullScreenEnable = enableFullScreen;\n    };\n\n    /**\n     * Load the specified UI element (which in the case of Ace will need\n     * to know the language, lang, as well - this must be supplied as\n     * a 'lang' attribute of the record params.\n     * When ui is up and running, this.uiInstance will reference it.\n     * To avoid a potential race problem, if this method is already busy\n     * with a load, try again in 200 msecs.\n     * @param {string} uiname The name of the User Interface to be used.\n     * @param {object} params The UI parameters object that passes parameters\n     * to the actual UI object.\n     */\n    InterfaceWrapper.prototype.loadUi = function(uiname, params) {\n        const MAX_RETRIES = 20; // Maximum number of attempts to load the UI.\n        const t = this;\n        const errPart1 = 'Failed to load ';\n        const errPart2 = ' UI component. If this error persists, please report it to the forum on coderunner.org.nz';\n\n        /**\n         * Get the given language string and plug it into the given\n         * div element as its html, plus a 'fallback' message on a separate line.\n         * @param {string} langString The language string specifier for the error message,\n         * to be loaded by AJAX.\n         * @param {object} errorDiv The div object into which the error message\n         * is to be inserted.\n         */\n        function setLoadFailMessage(langString, errorDiv) {\n            require(['core/str'], function(str) {\n                /**\n                 * Get langString text via AJAX\n                 */\n                const s = str.get_string(langString, 'qtype_coderunner');\n                const fallback = str.get_string('ui_fallback', 'qtype_coderunner');\n                Promise.all([s, fallback]).then(function(results) {\n                    const s = results[0];\n                    const fallback = results[1];\n                    errorDiv.innerHTML = s + '<br>' + fallback;\n                });\n            });\n        }\n\n        /**\n         * The default method for a UIs sync_interval_secs method.\n         * Returns the sync_interval_secs parameter if given, else\n         * DEFAULT_SYNC_INTERVAL_SECS.\n         */\n        function syncIntervalSecsBase() {\n            if (params.hasOwnProperty('sync_interval_secs')) {\n                return parseInt(params.sync_interval_secs);\n            } else {\n                return t.DEFAULT_SYNC_INTERVAL_SECS;\n            }\n        }\n\n        if (this.isLoading) {  // Oops, we're loading a UI element already\n            this.retries += 1;\n            if (this.retries > MAX_RETRIES) {\n                alert(errPart1 + uiname + errPart2);\n                this.retries = 0;\n                this.loading = 0;\n            } else {\n                setTimeout(function() {\n                    t.loadUi(uiname, params);\n                }, 200); // Try again in 200 msecs\n            }\n            return;\n        }\n        this.retries = 0;\n        this.params = params;  // Save in case need to restart\n\n        this.stop();  // Kill any active UI first\n        this.uiname = uiname;\n\n        if (this.uiname === '' || this.uiname === 'none' || sessionStorage.getItem('disableUis')) {\n            this.uiInstance = null;\n        } else {\n            this.isLoading = true;\n            require(['qtype_coderunner/ui_' + this.uiname],\n                function(ui) {\n                    const h = t.textArea.clientHeight - t.GUTTER;\n                    const w = t.textArea.clientWidth;\n                    const uiInstance = new ui.Constructor(t.taId, w, h, params);\n                    if (uiInstance.failed()) {\n                        /*\n                         * Constructor failed to load serialisation.\n                         * Set uiloadfailed class on text area.\n                         */\n                        t.loadFailed = true;\n                        t.wrapperNode.style.display = 'none';\n                        t.textArea.style.display = '';\n                        uiInstance.destroy();\n                        t.uiInstance = null;\n                        t.textArea.classList.add('uiloadfailed');\n                        const loadFailDiv = document.createElement('div');\n                        loadFailDiv.id = t.loadFailId;\n                        loadFailDiv.className = 'uiloadfailed';\n                        t.textArea.parentNode.insertBefore(loadFailDiv, t.textArea);\n                        setLoadFailMessage(uiInstance.failMessage(), loadFailDiv);  // Insert error by AJAX\n                    } else {\n                        t.textArea.style.display = 'none';\n                        t.wrapperNode.style.display = '';\n                        let elementToAdd = uiInstance.getElement();\n                        if (elementToAdd && elementToAdd.jquery) { // Check if the UI instance returned a jQuery object.\n                            elementToAdd = elementToAdd[0];\n                        }\n\n                        if (elementToAdd) {\n                            // Some naughty (?) UIs, such as scratchpad UI, return null, and then\n                            // plug themselves into the wrapper asynchronously. [Necessary when using mustache templates].\n                            // So fingers crossed they know what they're doing.\n\n                            t.wrapperNode.appendChild(elementToAdd);\n\n                            // With jQuery, any embedded <script> elements will have been executed.\n                            // But not with pure JavaScript. We have to pull them out and append them to\n                            // the head to trigger their execution.\n                            const scriptNodes = elementToAdd.querySelectorAll('script'); // Find all script tags in the node\n                            scriptNodes.forEach(oldScript => {\n                                const newScript = document.createElement('script');\n                                if (oldScript.src) {\n                                    // External script\n                                    newScript.src = oldScript.src;\n                                } else {\n                                    // Inline script\n                                    newScript.textContent = oldScript.textContent;\n                                }\n                                document.head.appendChild(newScript); // Append to the head (triggers execution)\n                                document.head.removeChild(newScript); // Remove the script again.\n                            });\n                        }\n                        t.uiInstance = uiInstance;\n                        t.loadFailed = false;\n                        t.checkForResize();\n\n                        /*\n                         * Set a default syncIntervalSecs method if uiInstance lacks one.\n                         */\n                        let uiInstancePrototype = Object.getPrototypeOf(uiInstance);\n                        uiInstancePrototype.syncIntervalSecs = uiInstancePrototype.syncIntervalSecs || syncIntervalSecsBase;\n                        t.startSyncTimer(uiInstance);\n                        let canDoFullScreen = t.isFullScreenEnable !== null ?\n                            t.isFullScreenEnable : uiInstance.allowFullScreen?.();\n                        if (canDoFullScreen) {\n                            t.initFullScreenToggle(t.taId);\n                        } else {\n                            t.removeFullScreenButton(t.taId);\n                        }\n                    }\n                    t.isLoading = false;\n                });\n        }\n    };\n\n\n    /**\n     * Remove the fullscreen button from the wrapper editor.\n     *\n     * @param {String} fieldId The id of answer field.\n     */\n    InterfaceWrapper.prototype.removeFullScreenButton = function(fieldId) {\n        const wrapperEditor = document.getElementById(`${fieldId}_wrapper`);\n        const screenModeButton = wrapperEditor.parentNode.querySelector('.screen-mode-button');\n        if (screenModeButton) {\n            screenModeButton.remove();\n        }\n    };\n\n    /**\n     * Initialize elements and event listeners for the fullscreen mode.\n     *\n     * @param {String} fieldId The id of answer field.\n     */\n    InterfaceWrapper.prototype.initFullScreenToggle = function(fieldId) {\n        const wrapperEditor = document.getElementById(`${fieldId}_wrapper`);\n        const screenModeButton = wrapperEditor.parentNode.querySelector('.screen-mode-button');\n        if (screenModeButton) {\n            return;\n        }\n\n        Templates.renderForPromise('qtype_coderunner/screenmode_button', {}).then(({html}) => {\n            const screenModeButton = Templates.appendNodeContents(wrapperEditor, html, '')[0];\n            const fullscreenButton = screenModeButton.querySelector('.button-fullscreen');\n            const exitFullscreenButton = screenModeButton.querySelector('.button-exit-fullscreen');\n\n            // When load successfully, show the fullscreen button.\n            fullscreenButton.classList.remove('d-none');\n\n            // Add event listeners to the fullscreen/exit-fullscreen button.\n            fullscreenButton.addEventListener('click', enterFullscreen.bind(this,\n                fullscreenButton, exitFullscreenButton));\n            exitFullscreenButton.addEventListener('click', exitFullscreen.bind(this));\n        });\n\n        /**\n         * Make the editor fullscreen.\n         *\n         * @param {HTMLElement} fullscreenButton The fullscreen button.\n         * @param {HTMLElement} exitFullscreenButton The exit fullscreen button.\n         * @param {Event} e The click event.\n         */\n        function enterFullscreen(fullscreenButton, exitFullscreenButton, e) {\n            let t = this;\n            e.preventDefault();\n            // The editor can stretch out.\n            // So we need to save the original height and width of the editor before going fullscreen.\n            t.wrapperHeight = t.wrapperNode.clientHeight;\n            t.heightEditNode = t.hLast;\n            t.widthEditNode = t.wLast;\n\n            fullscreenButton.classList.add('d-none');\n            // Append exit fullscreen button to the wrapper editor.\n            // So that when in the fullscreen mode, the exit fullscreen button will be in the wrapper editor.\n            wrapperEditor.append(exitFullscreenButton);\n\n            // Handle fullscreen event.\n            wrapperEditor.addEventListener('fullscreenchange', () => {\n                if (document.fullscreenElement === null) {\n                    // When exit fullscreen using ESC key or press exit fullscreen button.\n                    // We need to reset the editor to the original size.\n                    t.uiInstance.resize(t.widthEditNode, t.heightEditNode);\n\n                    // We need to reset the wrapper height to the original height.\n                    // In fullscreen mode, the wrapper height can change by stretching it out.\n                    wrapperEditor.style.height = t.wrapperHeight + 'px';\n\n                    // Add and remove the d-none class to show and hide the buttons.\n                    exitFullscreenButton.classList.add('d-none');\n                    fullscreenButton.classList.remove('d-none');\n                } else {\n                    exitFullscreenButton.classList.remove('d-none');\n                }\n            });\n            wrapperEditor.requestFullscreen().catch(Notification.exception);\n        }\n\n        /**\n         * Exit the fullscreen mode.\n         *\n         * @param {Event} e the click event.\n         */\n        function exitFullscreen(e) {\n            let t = this;\n            e.preventDefault();\n            document.exitFullscreen();\n\n            // Reset the editor to the original size before going fullscreen.\n            wrapperEditor.style.height = t.wrapperHeight + 'px';\n            t.uiInstance.resize(t.widthEditNode, t.heightEditNode);\n        }\n    };\n\n    /**\n     * Start a sync timer on the given uiInstance, unless its time interval is 0.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.startSyncTimer = function(uiInstance) {\n        const timeout = uiInstance.syncIntervalSecs();\n        if (timeout) {\n            this.uiInstance.timer = setInterval(function () {\n                uiInstance.sync();\n            }, timeout * 1000);\n        } else {\n            this.uiInstance.timer = null;\n        }\n    };\n\n\n    /**\n     * Stop the sync timer on the given uiInstance, if running.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.stopSyncTimer = function(uiInstance) {\n        if (uiInstance.timer) {\n            clearTimeout(uiInstance.timer);\n        }\n    };\n\n\n    InterfaceWrapper.prototype.stop = function() {\n        /*\n         * Disable (shutdown) the embedded ui component.\n         * The wrapper remains active for ctrl-alt-M events, but is hidden.\n         */\n        if (this.uiInstance !== null) {\n            this.stopSyncTimer(this.uiInstance);\n            this.textArea.style.display = '';\n            if (this.uiInstance.hasFocus()) {\n                this.textArea.focus();\n                this.textArea.selectionStart = this.textArea.value.length;\n            }\n            this.uiInstance.destroy();\n            this.uiInstance = null;\n            this.wrapperNode.style.display = 'none';\n        }\n        this.loadFailed = false;\n        this.textArea.classList.remove('uiloadfailed'); // Just in case it failed before\n        const elementToRemove = document.getElementById(this.loadFailId);\n        if (elementToRemove) {\n            elementToRemove.parentNode.removeChild(elementToRemove);\n        }\n    };\n\n    /*\n     * Re-enable the ui element (e.g. after alt-ctrl-M). This is\n     * a full re-initialisation of the ui element.\n     */\n    InterfaceWrapper.prototype.restart = function() {\n        if (this.uiInstance === null) {\n            /**\n             * Restart the UI component in the textarea\n             */\n            this.loadUi(this.uiname, this.params);\n        }\n    };\n\n\n    /**\n     * Check for wrapper resize - propagate to ui element.\n     */\n    InterfaceWrapper.prototype.checkForResize = function() {\n        if (this.uiInstance) {\n            const h = this.wrapperNode.clientHeight;\n            const w = this.wrapperNode.clientWidth;\n            const maxWidth = this.wrapperNode.clientWidth;\n            const hAdjusted = h - this.GUTTER;\n            const wAdjusted = Math.min(maxWidth, w);\n            if (hAdjusted != this.hLast || wAdjusted != this.wLast) {\n                this.uiInstance.resize(wAdjusted,  hAdjusted);\n                this.hLast = hAdjusted;\n                this.wLast = wAdjusted;\n            }\n        }\n    };\n\n    /**\n     * The external entry point from the PHP.\n     * @param {string} uiname The name of the User Interface to use e.g. 'ace'\n     * @param {string} textareaId The ID of the textarea to be wrapped.\n     */\n    function newUiWrapper(uiname, textareaId) {\n        if (uiname) {\n            return new InterfaceWrapper(uiname, textareaId);\n        } else {\n            return null;\n        }\n    }\n\n\n    return {\n        newUiWrapper: newUiWrapper,\n        InterfaceWrapper: InterfaceWrapper\n    };\n});\n"],"names":["define","Templates","Notification","InterfaceWrapper","uiname","textareaId","t","this","GUTTER","DEFAULT_SYNC_INTERVAL_SECS","uniqueId","Math","random","isFullScreenEnable","taId","loadFailId","textArea","document","getElementById","current_ui_wrapper","alert","params","getAttribute","uiParams","JSON","parse","lang","readOnly","isLoading","loadFailed","retries","h","clientHeight","content_lines","value","split","length","rows","min","max","style","height","wrapperNode","createElement","id","classList","add","display","resize","overflow","minHeight","width","border","insertAdjacentElement","wLast","hLast","uiInstance","loadUi","ResizeObserver","checkForResize","observe","window","addEventListener","form","closest","sync","body","keyDown","e","key","ctrlKey","altKey","wrapper","stop","restart","removeEventListener","prototype","setAllowFullScreen","enableFullScreen","syncIntervalSecsBase","hasOwnProperty","parseInt","sync_interval_secs","loading","setTimeout","sessionStorage","getItem","require","ui","w","clientWidth","Constructor","failed","destroy","loadFailDiv","className","parentNode","insertBefore","langString","failMessage","errorDiv","str","s","get_string","fallback","Promise","all","then","results","innerHTML","elementToAdd","getElement","jquery","appendChild","querySelectorAll","forEach","oldScript","newScript","src","textContent","head","removeChild","uiInstancePrototype","Object","getPrototypeOf","syncIntervalSecs","startSyncTimer","allowFullScreen","_uiInstance$allowFull","initFullScreenToggle","removeFullScreenButton","fieldId","screenModeButton","querySelector","remove","wrapperEditor","enterFullscreen","fullscreenButton","exitFullscreenButton","preventDefault","wrapperHeight","heightEditNode","widthEditNode","append","fullscreenElement","requestFullscreen","catch","exception","exitFullscreen","renderForPromise","_ref","html","appendNodeContents","bind","timeout","timer","setInterval","stopSyncTimer","clearTimeout","hasFocus","focus","selectionStart","elementToRemove","maxWidth","hAdjusted","wAdjusted","newUiWrapper"],"mappings":"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"}