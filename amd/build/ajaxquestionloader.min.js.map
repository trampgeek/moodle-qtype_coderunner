{"version":3,"file":"ajaxquestionloader.min.js","sources":["../src/ajaxquestionloader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for filling in the question text with the contents of one\n * of the question's support files. Intended primarily for program contest\n * problems, where the support file is a single domjudge or ICPC problem zip,\n * with the problem spec within it.\n *\n * @module qtype_coderunner/ajaxquestionloader\n * @copyright  Richard Lobb, 2019; Paul McKeown 2023. The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// jshint esversion:6\n\n/**\n * Append to the question text div in the question a data-URL containing\n * the contents of the question specification file (usu. a pdf).\n * @param {int} qid The question ID in the database.\n * @param {string} divId The ID of the question text <div> element.\n * @param {string} questionFilename The name of the problem spec file within\n * the problem zip file.\n */\nexport function loadQuestionText(qid, divId, questionFilename) {\n    const questionTextDiv = document.getElementById(divId),\n        error = 'Failed to load problem spec',\n        errorElem = document.createTextNode(error),\n        url = M.cfg.wwwroot + '/question/type/coderunner/problemspec.php?questionid=' + qid +\n        '&sesskey='+M.cfg.sesskey+'&filename='+questionFilename;\n\n    fetch(url)\n        .then((response) => {\n            if (response.ok) {\n                return response.json();}\n            else {\n                throw new Error(error);  // fetch failed for some reason\n            }\n        })\n        .then(function (data) {\n            const anchorElem = document.createElement('a');\n            if (data.filecontentsb64) {\n                anchorElem.href = 'data:application/pdf;base64,'+data.filecontentsb64;\n                anchorElem.text = 'Problem Spec';\n                anchorElem.download = \"problem_spec\";  // suggested filename for download\n                questionTextDiv.appendChild(anchorElem);\n            } else {\n                throw new Error(error);  // didn't get expected contents\n            }\n        })\n        .catch(() =>  {questionTextDiv.appendChild(errorElem);});\n}\n"],"names":["qid","divId","questionFilename","questionTextDiv","document","getElementById","error","errorElem","createTextNode","url","M","cfg","wwwroot","sesskey","fetch","then","response","ok","json","Error","data","anchorElem","createElement","filecontentsb64","href","text","download","appendChild","catch"],"mappings":";;;;;;;;;;;SAmCiCA,IAAKC,MAAOC,wBACnCC,gBAAkBC,SAASC,eAAeJ,OAC5CK,MAAQ,8BACRC,UAAYH,SAASI,eAAeF,OACpCG,IAAMC,EAAEC,IAAIC,QAAU,wDAA0DZ,IAChF,YAAYU,EAAEC,IAAIE,QAAQ,aAAaX,iBAE3CY,MAAML,KACDM,MAAMC,cACCA,SAASC,UACFD,SAASE,aAEV,IAAIC,MAAMb,UAGvBS,MAAK,SAAUK,YACNC,WAAajB,SAASkB,cAAc,SACtCF,KAAKG,sBAMC,IAAIJ,MAAMb,OALhBe,WAAWG,KAAO,+BAA+BJ,KAAKG,gBACtDF,WAAWI,KAAO,eAClBJ,WAAWK,SAAW,eACtBvB,gBAAgBwB,YAAYN,eAKnCO,OAAM,KAAQzB,gBAAgBwB,YAAYpB"}