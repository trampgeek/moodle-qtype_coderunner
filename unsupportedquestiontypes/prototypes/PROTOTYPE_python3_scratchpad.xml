<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 32442  -->
  <question type="coderunner">
    <name>
      <text>PROTOTYPE_python3_scratchpad</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p><span style="font-size: 0.9375rem;">Prototype for a COSC131 Python3 question that is checked by either pylint or ruff before being executed. Other local style checks are also implemented.</span></p>
<p>This version uses the Scratchpad UI to include a test panel that the student can use to run tests.</p>
<p>It can take the following template parameters.</p>
<ul>
<li>
<p><strong>abortonerror</strong>: true to abort testing when a runtime error occurs. Default: true</p>
</li>
<li>
<p><strong>allowglobals</strong>: set this to true to allow global variables (i.e. to allow lowercase globals, not just "constants"). Default: false.</p>
</li>
<li>
<p><strong>allownestedfunctions</strong>: set this to true to allow functions to be declared with a non-global scope. Default: false.</p>
</li>
<li>
<p><strong>banglobalcode</strong>: If true, no global assignment (except global constants), for, while or if constructs are allowed. Default: true.</p>
</li>
<li>
<p><strong>banfunctionredefinitions:</strong> If true, names given to custom functions cannot be subsequently used as variables. Default: true.</p>
</li>
<li>
<p><strong>checktemplateparams</strong>: set this false to bypass the usual check for validity of template params (e.g. when doing randomisation, although prefixing the extra template params with '_' is preferred).</p>
</li>
<li><strong style="font-size: 0.9375rem;">dpi</strong><span style="font-size: 0.9375rem;">. The dots-per-inch value to use for any matplotlib images. Default value: 65</span></li>
</ul>
<ul>
<li>
<p><strong>echostandardinput</strong>. If false, the standard builtin Python <em>input</em> function will be used. Otherwise, it will be replaced with a version that echoes the prompt to standard output to mimic the behaviour observed when standard input comes from the keyboard. Default: True</p>
</li>
<li>
<p><strong>extra: </strong>should be a string, one of "", "pretest" or "posttest". If set and not empty, the TEST.extra field is inserted into the program before or after TEST.testcode for the values "pretest" and "posttest" respectively. Default: ""</p>
</li>
<li>
<p><strong>floattolerance</strong>: a floating point number which, if defined and non-None, changes the test for correct output as follows. The <em>expected</em> and <em>got</em> outputs are both right-stripped then broken into lines. If the number of lines don't match, the answer is deemed wrong. Then (after compressing white space to a single character if <em>strictwhitespace</em> is false) the <em>got</em> and <em>expected</em> outputs are compared line for line. Each line is split by a regular expression pattern that matches any floating point number or integer and the two lines are compared token by token. If both tokens are numbers they must be equal to within  <em>floattolerance</em>. The actual test is abs(float(f1) - float(f2) &lt;= floattolerance * 1.0001. The factor of 1.0001 is to allow for floating point error in the case where two decimal numbers that appear to satisfy the criterion, such as 0.65 and 6.5e-01 with a float tolerance of 0.01, actually don't quite due to floating point error in the computation. If <em>floattolerance</em> is 0.0 the effect is to treat ints as floats, e.g.  1 and 1.0 will be deemed equal. Default: None</p>
</li>
<li>
<p><strong>globalextra</strong>: should be a string, one of "", "pretest" or "posttest". If set and not empty, the QUESTION.globalextra field is inserted into the program before or after TEST.testcode for the values "pretest" and "posttest" respectively. If TEST.extra and QUESTION.globalextra are both being inserted before the test or both are being inserted after the test, the globalextra precedes the TEST.extra. Default: ""</p>
</li>
<li>
<p><strong>imagewidth</strong>: if this is given it sets the width in pixels of any matplotlib images inserted into the result table. Height is automatically scaled to match. Otherwise the image is inserted unscaled. Ignored unless <em>usesmatplotlib</em> is true. Default: None.</p>
</li>
<li>
<p><strong>imports</strong>: this is a list of python import strings. Each string is either just a python module name or a full python import string. If just <em>name</em> is given, the import statement is simply "import name", otherwise the import string is used as given. For example:</p>
<pre>{ "imports": ["math", "from blah import thing as twaddle"] }</pre>
<p>Imports go at the very start of the generated program. This mechanism can be used to import test support functions, too, and is preferred over the use of a <tt>_prefix.py</tt> file.</p>
</li>
<li>
<p><strong>isfunction</strong>: unless this is explicitly set to false, or the student's code already begins with a docstring, a dummy module docstring will be inserted at the start of the program<strong>.</strong>  Also, if <em>isfunction</em> is true, the supplied code will be run stand-alone to check if it generates any output and an error message will be generated if it does. Thus, if your question is of the "write a program" variety, you should set this to false. Otherwise omit it. Default: true.</p>
</li>
<li>
<p><strong>localprechecks</strong>: if true, run the local prechecks for things like global code, required/proscribed functions and constructs, unexpected output. If local prechecks give any errors, the precheckers (ruff, pylint, mypy) will not be run. Default: true.</p>
</li>
<li>
<p><strong>maxfunctionlength</strong>: this is the maximum number of statements that a function body can contain. Statements within statements are counted. Blank lines and comments aren't statements.  This is a more-reliable alternative to the pylint <em>max-statements</em> parameter, which behaves strangely at times. </p>
</li>
<li>
<p><strong>maxnumconstants</strong>: the maximum number of constants (i.e. uppercase globals) allowed. An integer, defaulting to 4.</p>
</li>
<li>
<p><strong>maxreturndepth: </strong>the maximum depth of nesting allowed for any return statements. Default: None (meaning "no limit").</p>
</li>
<li>
<p><strong>maxprechecks</strong>: the maximum number of prechecks allowd for this question. Default: None (meaning "no limit").</p>
</li>
<li>
<p><strong>maxoutputbytes</strong>: the maximum allowed number of output bytes. Default 10000.</p>
</li>
<li>
<p><strong>maxstringlength: </strong>the maximum allowed length of the output string or error string in the result table. Strings longer than this have their inner content snipped out. An integer defaulting to 2000.</p>
</li>
<li>
<p><strong>norun</strong>: if set to true, the normal execution of the student's code will not take place. Any test code provided will however still be run.</p>
</li>
<li>
<p><strong>nostylechecks</strong>: true to suppress all normal style checking, including the checkers listed in "precheckers". Default: false</p>
</li>
<li>
<p><strong>notest</strong>: if present and set to true, the test code will not be inserted into the code to be executed. Its role is then just as documentation for the student (as it still appears in the result table).</p>
</li>
<li>
<p><strong>parsonsproblemthreshold: </strong>if a wrong answer is submitted and the number of submissions (Checks) is greater than or equal to this value (parsonsproblemthreshold) the student is presented with a link that, if clicked, will expose the author's answer with all indentation removed and the order scrambled.</p>
</li>
<li>
<p><strong>precheckers</strong>: a list of the names of programs to be run when prechecking the correctness of the code. Currently only "ruff", "pylint" and "mypy" are supported. These prechecks do not run if local checks give an error. Default: ["ruff"].</p>
</li>
<li>
<p><strong>prelude</strong>: a possibly multi-line string that is inserted into the file after any imports and other template-generated code but before the student answer (and before the _prefix.py file, if supplied).</p>
</li>
<li>
<p><strong>proscribedbuiltins</strong>: this is a list of the Python built-in functions that cannot be used. Default: ["exec", "eval"].</p>
</li>
<li>
<p><strong>proscribedconstructs</strong>: this is a list of Python constructs (if, while, def, slice, listcomprehension, etc) that<em> must not</em> appear in the student's program.</p>
</li>
<li>
<p><strong>proscribedfunctions</strong>: this is a list of functions (sum, product, etc) that <em>must not</em> appear in the student's program. Default: []</p>
</li>
<li>
<p><strong>proscribedsubstrings</strong>: this is a list of strings that <em>must not</em> appear anywhere in the student's program (even in comments). Default: []</p>
</li>
<li>
<p><strong>pylintoptions</strong>: a list of strings to be <em>added to </em>the default list of options to pylint (relevant only if pylint is specified as one of the precheckers). For example, the Template parameters string in the question authoring form might be set to</p>
<pre>{"isfunction": false, "pylintoptions":["--max-args=3", "--good-names=i,j,k,n,s,c,_,x,y,z"]}</pre>
<p>to suppress the insertion of a dummy module docstring at the start, to set the maximum number of arguments for each function to 3, and to add the variable names <code>x</code>, <code>y</code> and <code>z</code> to the standard list of allowed 1-character names (<code>"--good-names=i,j,k,n,s,c,_"</code>).</p>
</li>
<li>
<p><strong>requiredconstructs</strong>: this is a list of Python constructs (if, while, def, etc) that<strong> must </strong>appear in the student's program. Default: []</p>
</li>
<li>
<p><strong>requiredfunctiondefinitions</strong>: this is a list of the names of the functions that must be defined within the student's program. Default: []</p>
</li>
<li>
<p><strong>requiredfunctioncalls</strong>: this is a list of the names of functions that must be explicitly called within the student's code</p>
</li>
<li>
<p><strong>requiredsubstrings</strong>: this is either a list of strings that <strong>must</strong> appear somewhere in the students code. Or a list of json objects with the keys "string", "pattern" and "errormessage". Only one of "string" or "pattern" should be supplied. "String" corresponds to a string that must appear in the student's code and "pattern" corresponds to a python regular expression that must match somewhere in the student's code. "errormessage" is the feedback that will be given to students when they fail this on precheck.</p>
</li>
<li>
<p><strong>requiretypehints</strong>: if <em>True</em> all functions must have type hints for all parameters and the return type. Default: False (may not still be working, and/or may need mypy as one of the precheckers).</p>
</li>
<li>
<p><strong>restrictedfiles</strong>: this specifies which files the students program is allowed to open. It is dictionary with two optional keys 'onlyallow' and 'disallow'. Each of these should map to a list of files that are allowed to be opened and filenames that are not allowed to be opened. The filenames in the lists can be a regex.<br>Default:</p>
<pre>{"disallow": ["__.*", "prog.*", "pytester.py"]</pre>
</li>
<li>
<p> <strong>restrictedmodules</strong>: A dictionary that specifies what modules are to be restricted. Keys are the names of modules and the values are a dictionary with two keys 'onlyallow' and 'disallow'. Each of these is a list of the names of objects within the module which are allowed or disallowed. The names of objects in these lists can be a regex.  This is a runtime check only, not part of style checker.</p>
<p>Default:</p>
<pre> "restrictedmodules": {
    "builtins": {"onlyallow": []},
    "imp": {"onlyallow": []},
    "importlib": {"onlyallow": []},
    "os": {"disallow": ["system", "_exit", "_.*"]},
    "subprocess": {"onlyallow": []},
    "sys": {"onlyallow": []},
}</pre>
</li>
<li>
<p><strong>resulttablecolumns: </strong>DEFUNCT - don't use. Use resultcolumns instead.</p>
</li>
<li>
<p><strong>resultcolumns</strong>: a list of [header, field] 2-element lists defining the columns to display in the result table. The first element in each pair is the column header, the second is the field of the CodeRunner test result object to display in that column. Note that columns in which all elements are empty are suppressed regardless. Default: <code>[['Test', 'testcode'],
        ['Input', 'stdin'], ['Expected', 'expected'], ['Got', 'got']]</code></p>
</li>
<li>
<p><strong>ruffoptions</strong>: a list of additional options to modify or override the default settings of the ruff linter as defined in <em>pyproject.toml</em> in the prototype. For example<br>    <code>["--extend-select
      E731,F401", "--ruff-max-branches 15", "--line-length=80",
      "--ignore=F234"]</code>.<br>For ruff settings see https://docs.astral.sh/ruff/settings/. Relevant only if ruff is listed as a prechecker.</p>
</li>
<li>
<p><strong>runextra</strong>: if set (to any value) the Extra Template Data is added to the program as test code <em>before</em> the usual testcode. [Deprecated: use the <em>extra</em> parameter instead.]</p>
</li>
<li>
<p><strong>showfeedbackwhenright</strong>:<strong> </strong>If true, when a student provides a valid solution they are presented with an option to see the question author's solution. Default: false</p>
</li>
<li>
<p><strong>strictwhitespace</strong>: by default when checking correctness trailing blank lines and trailing white space on each line are ignored but otherwise white space must match exactly. If this parameter is set to false, white space within a line may vary, i.e., multiple spaces are treated as 1 space. Default: true</p>
</li>
<li>
<p><strong>stripmain</strong>: if set to true, the program is expected to contain a global invocation of the main function, which is a line starting "main()". That line is deleted from the program. If the line is not present a "Missing call to main" exception is raised.</p>
</li>
<li>
<p><strong>stripmainifpresent</strong>: if set to true and the program contains a global invocation of a main function, which is a line starting "main()", that line is deleted from the program. Otherwise nothing happens (cf stripmain).</p>
</li>
<li>
<p><strong>suppresspassiveoutput</strong>: if set to true, any output generated by the student code even without any CodeRunner tests being run is ignored. This can be used, for example, to ignore output from any test code the student has included <em>and/or</em> to ignore the main output from a "write a program question". Only the output generated by CodeRunner tests will be displayed and marked. Default: false.</p>
</li>
<li>
<p><strong>timeout</strong>: number of seconds allowed for each test case. Default: 5 secs. Be careful to ensure that the total time for all test cases can not exceed <strong>totaltimeout</strong>, particularly if <em>abortonerror</em> is false.</p>
</li>
<li>
<p><strong>totaltimeout</strong>: total number of seconds allowed for the whole run. Must not exceed the maximum allowed by Jobe, which is 50 seconds (and which is the default value for this parameter).</p>
</li>
<li>
<p><strong>useanswerfortests</strong>: if true, a run with the sample answer precedes the run with the student answer and the results from the sample answer are used for correctness testing <em>but only if no expected output is supplied</em>. However, because this takes place at runtime, this doesn't work for "Use as example" tests, for which the expected output must be supplied by the question author.</p>
</li>
<li>
<p><strong>usesmatplotlib: </strong>if true, header text is inserted at the start of the program to switch matlab graph output to use the non-interactive 'Agg' backend, which writes images to disk an .PNGs. After each test, the current state of the pyplot figure is saved to a new file. When all tests have been run and graded, the set of image files is inserted row-by-row into the result table with each figure below any text in the cell. For this to work correctly at least the first test must create a figure. The image is not graded - it is provided only for reference, so usually the test code will need to extract and display attributes of the current figure independently. See also the template parameters <em>useanswerfortests</em>, which results in the expected images being inserted into the table too and <em>imagewidth </em>which sets the width (and hence height by uniform scaling) to a desired number of pixels. Note that if <em>usesmatplotlib</em> is selected and pylint is being used, most of the pylint options relating to imports (ordering, reimporting, positioning etc) are disabled. Also, you may need to increase the timeout value for the question.<br><br>If <em>usesmatplotlib </em>is true, <em>pylint</em> checking is disabled.<br><br>Also, if <em>usesmatplotlib</em> is true, a function  <em>print_plot_info(data_type)</em> is made available for use in the test code or post-test extra. This prints various properties of the current plot for grading purposes. <em>data_type</em> should be one of 'points', 'lines' or 'bars'. There are lots of additional parameters to control the output. See the separate section below for details.<br><br>Default (for usesmatplotlib): false. </p>
</li>
<li>
<p><strong>usesnumpy: </strong>if true, the line <em>import numpy as np</em> is inserted at the start of the program, and the usual check for unused imports is turned off. [Defunct: don't use.]</p>
</li>
<li>
<p><strong>warnifpassiveoutput</strong>: if set to true and <em>isfunction</em> is also true, generate a style error if the student's code seems to produce output even without any CodeRunner tests being executed. This is probably the result of the student pasting test code as well as requested function(s) into their answer. Default: true</p>
</li>
</ul>
<p>Also, if a file named '_prefix.py' appears in the working directory (i.e. has been attached to the question), the code in that file is inserted into the executable program after any imports and other template-generated code but before the student answer. However, the use of an explicit import statement is preferred.</p>
<h4>The <em>print_plot_info</em> function</h4>
<p>In addition to the mandatory positional parameter <em>data_type</em>, which must be one of <code>points</code>, <code>lines</code>, or <code>bars</code>, the function can take a range of keyword parameters, as defined by the following Python dictionary of default values:</p>
<pre>DEFAULT_PARAMS = {
    'x_samples': None,        # A list of x-values at which y values should be interpolated.
    'bar_indices': None,      # A list of the 0-origin bar indices to report on. None for all bars.
    'show_xlim': False,       # True to display the x-axis limits
    'show_ylim': False,       # True to display the y-axis limits
    'show_colour': False,     # True to report line/marker/title colour<br>    'show_titlefont': False,  # True to display title font and size (and colour if show_colour is True)
    'show_xticklabels': False,  # True to display x-tick labels
    'show_yticklabels': False,  # True to display y-tick labels
    'show_xticks': False,     # True to display x-tick numeric values
    'show_yticks': False,     # True to display y-tick numeric values
    'show_barx': True,        # True to print the x-coordinates of all bars
    'show_linelabels': None,  # True to show line labels, default is True if there's a legend else False
    'sort_points': False,     # True to sort data by x then y.
    'first_num_points': 5,    # Number of points to print at the start of the point list.
    'last_num_points': 5,     # Number of points to print at the end of the point list.
    'float_precision': (1, 1),  # Num digits to display after decimal point for x and y values resp
    'max_label_length': 60,   # Use multiline display if tick label string length exceeds this
    'lines_to_print': None,   # If non-None, a list of indices of lines to print (0 is first line).
    'line_info_only': False,  # True to suppress all except the line/bar/points info
}
    </pre>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python3_scratchpad</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>60</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import locale
import json
import os
import re
import html
import random

from pytester import PyTester

STANDARD_PYLINT_OPTIONS = ['--disable=trailing-whitespace,superfluous-parens,' + 
                      'too-few-public-methods,consider-using-f-string,useless-return,' + 
                      'unbalanced-tuple-unpacking,too-many-statements,' + 
                      'consider-using-enumerate,simplifiable-if-statement,' + 
                      'consider-iterating-dictionary,trailing-newlines,no-else-return,' + 
                      'consider-using-dict-comprehension,consider-using-generator,' + 
                      'len-as-condition,inconsistent-return-statements,consider-using-join,' + 
                      'singleton-comparison,unused-variable,chained-comparison,no-else-break,' + 
	                  'consider-using-in,useless-object-inheritance,unnecessary-pass,' + 
	                  'reimported,wrong-import-order,wrong-import-position,ungrouped-imports,' + 
                      'consider-using-set-comprehension,no-else-raise,unnecessary-lambda-assignment,' + 
                      'unspecified-encoding,use-dict-literal,consider-using-with,consider-using-min-builtin,' + 
                      'duplicate-string-formatting-argument,consider-using-dict-items,' + 
                      'consider-using-max-builtin,use-a-generator,unidiomatic-typecheck', 
                      '--good-names=i,j,k,n,s,c,_' 
                      ] 


locale.setlocale(locale.LC_ALL, 'C.UTF-8')

KNOWN_PARAMS = {
    'abortonerror': True,
    'allowglobals': False,
    'allownestedfunctions': False,
    'banfunctionredefinitions': True,
    'banglobalcode': True,
    'checktemplateparams': True,
    'dpi': 65,
    'echostandardinput': True,
    'extra': 'None',
    'failhiddenonlyfract': 0,
    'floattolerance': None,
    'forcepylint': False,
    'globalextra': 'None',
    'imagewidth': None,
    'imports': [],
    'isfunction': True,
    'localprechecks': True,
    'maxfunctionlength': 30,
    'maxreturndepth': None,
    'maxprechecks': None,
    'maxnumconstants': 4,
    'maxoutputbytes': 10000,
    'maxstringlength': 2000,
    'norun': False,
    'nostylechecks': False,
    'notest': False,
    'parsonsproblemthreshold': None, # The number of checks before parsons' problem displayed
    'precheckers': ['ruff'],
    'prelude': '',
    'proscribedbuiltins': ['exec', 'eval'],
    'proscribedfunctions': [],
    'proscribedconstructs': ["goto", "while_with_else"],
    'proscribedsubstrings': [],
    'protectedfiles': [],
    'pylintoptions': [],
    'pylintmatplotlib': False,
    'requiredconstructs': [],
    'requiredfunctiondefinitions': [],
    'requiredfunctioncalls': [],
    'requiredsubstrings': [],
    'requiretypehints': False,
    'restrictedfiles': {
        'disallow': ['__.*', 'prog.*', 'pytester.py'],
    },
    'restrictedmodules': {
        'builtins': {
            'onlyallow': []
        },
        'imp': {
            'onlyallow': []  
        },
        'importlib': {
            'onlyallow': []  
        },
        'fileinput': {
            'onlyallow': []  
        },
        'os': {
            'disallow': ['system', '_exit', '_.*', 'open', 'fdopen', 'listdir']
        },
        'subprocess': {
            'onlyallow': []
        },
        'sys': {
            'disallow': ['_.*']
        },
    },
    'resultcolumns': [], # If not specified, use question's resultcolumns value. See below.
    'ruffoptions': [],
    'runextra': False,
    'showfeedbackwhenright': False,
    'stdinfromextra': False,
    'strictwhitespace': True,
    'stripmain': False,
    'stripmainifpresent': False,
    'testisbash': False,
    'timeout': 5,
    'totaltimeout': 50,
    'suppresspassiveoutput': False,
    'useanswerfortests': False,
    'usesmatplotlib': False,
    'usesnumpy': False,
    'usesubprocess': False,
    'warnifpassiveoutput': True,
}

class TestCase:
    def __init__(self, dict_rep):
        """Construct a testcase from a dictionary representation obtained via JSON"""
        self.testcode = dict_rep['testcode']
        self.stdin = dict_rep['stdin']
        self.expected = dict_rep['expected']
        self.extra = dict_rep['extra']
        self.display = dict_rep['display']
        try:
            self.testtype = int(dict_rep['testtype'])
        except:
            self.testtype = 0
        self.hiderestiffail = bool(int(dict_rep['hiderestiffail']))
        self.useasexample = bool(int(dict_rep['useasexample']))
        self.mark = float(dict_rep['mark'])


# ================= CODE TO DO ALL TWIG PARAMETER PROCESSING ===================

def process_template_params():
    """Extract the template params into a global dictionary PARAMS"""
    global PARAMS
    PARAMS = json.loads("""{{ QUESTION.parameters | json_encode | e('py') }}""")
    checktemplateparams = PARAMS.get('checktemplateparams', True)
    if checktemplateparams:
        unknown_params = set(PARAMS.keys()) - set(KNOWN_PARAMS.keys())
        filtered_params = [param for param in unknown_params if not param.startswith('_')]
        if filtered_params:
            print("Unexpected template parameter(s):", list(sorted(filtered_params)))

    for param_name, default in KNOWN_PARAMS.items():
        if param_name in PARAMS:
            param = PARAMS[param_name]
            if type(param) != type(default) and default is not None:
                print("Template parameter {} has wrong type (expected {})".format(param_name, type(default)))
        else:
            PARAMS[param_name] = default;

    if PARAMS['extra'] == 'stdin':
        PARAMS['stdinfromextra'] = True
    if PARAMS['runextra']:
        PARAMS['extra'] = 'pretest'  # Legacy support
    if PARAMS['timeout'] < 2:
        PARAMS['timeout'] = 2  # Allow 1 extra second freeboard 
    PARAMS['pylintoptions'] = STANDARD_PYLINT_OPTIONS + PARAMS['pylintoptions']
    if PARAMS['allowglobals']:
        PARAMS['pylintoptions'].append("--const-rgx='[a-zA-Z_][a-zA-Z0-9_]{2,30}$'")
    if PARAMS['usesmatplotlib']:
        if PARAMS['pylintmatplotlib']:
            PARAMS['pylintoptions'].append("--disable=reimported,wrong-import-position,wrong-import-order,unused-import")
        else:
            PARAMS['precheckers'] = []
    if PARAMS['testisbash']:
        print("testisbash is not implemented for Python")
        
    # We use the template parameter for resultcolumns if non-empty.
    # Otherwise use the value from the question, or an equivalent default if that's empty too.
    q_result_columns = """{{QUESTION.resultcolumns}}""".strip();
    if PARAMS['resultcolumns'] == []:
        if q_result_columns:
            PARAMS['resultcolumns'] = json.loads(q_result_columns);
        else:
            PARAMS['resultcolumns'] = [['Test', 'testcode'], ['Input', 'stdin'], ['Expected', 'expected'], ['Got', 'got']]


def get_test_cases():
    """Return an array of Test objects from the template parameter TESTCASES"""
    test_cases = [TestCase(test) for test in json.loads("""{{ TESTCASES | json_encode | e('py') }}""")]
    return test_cases


def scrambled(answer):
    """Return a randomly reordered version of the given answer"""
    if answer.strip() == '':
        return ''
    docstrings = re.findall(r'""".*?"""', answer) + re.findall(r"'''.*?'''", answer)
    rest = re.sub(r'""".*?"""', '', answer)
    rest2 = re.sub(r"'''.*?'''", '', rest)
    lines = [line.strip() for line in (rest2.splitlines() + docstrings) if line.strip()]
    original = lines[:]
    while len(lines) > 1 and original == lines: # Make sure the order changes!
        random.shuffle(lines)
    return '\n'.join(lines)
    
def get_answer():
    """Return the sample answer"""
    answer_json = """{{QUESTION.answer | e('py')}}""".strip()
    try:
        answer = json.loads(answer_json)['answer_code'][0]
    except:
        answer = answer_json  # Assume this is the original solution
    return answer
    
def process_global_params():
    """Plug into the PARAMS variable all the "global" parameters from
       the question and its answer (as distinct from the template parameters).
    """
    PARAMS['STUDENT_ANSWER'] = """{{ STUDENT_ANSWER | e('py') }}""".rstrip() + '\n'
    PARAMS['SEPARATOR'] = "#<ab@17943918#@>#"
    PARAMS['IS_PRECHECK'] = "{{ IS_PRECHECK }}" == "1"
    PARAMS['QUESTION_PRECHECK'] = {{ QUESTION.precheck }} # Type of precheck: 0 = None, 1 = Empty etc
    PARAMS['ALL_OR_NOTHING'] = "{{ QUESTION.allornothing }}" == "1" # Whether or not all-or-nothing grading is being used
    PARAMS['GLOBAL_EXTRA'] = """{{ QUESTION.globalextra | e('py') }}\n"""
    PARAMS['STEP_INFO'] = json.loads("""{{ QUESTION.stepinfo | json_encode }}""")
    answer = get_answer()
    if answer:
        if PARAMS['STUDENT_ANSWER'].strip() == answer.strip():
            PARAMS['AUTHOR_ANSWER'] = "<p>Your answer is an <i>exact</i> match with the author's solution.</p>"
        else:
            with open("__author_solution.html") as file:
                PARAMS['AUTHOR_ANSWER'] = (file.read().strip() % html.escape(answer))
        with open("__author_solution_scrambled.html") as file:
            PARAMS['AUTHOR_ANSWER_SCRAMBLED'] = (file.read().strip() % html.escape(scrambled(answer))) + "\n"
    else:
        PARAMS['AUTHOR_ANSWER'] = PARAMS['AUTHOR_ANSWER_SCRAMBLED'] = ''


def update_test_cases(test_cases, outcome):
    """Return the updated testcases after replacing all empty expected fields with those from the
       given outcome's test_results which must have a column header 'Got'. Non-empty existing expected
       fields are left unchanged.
       If any errors occur, the return value will be None and the outcome parameter will have had its prologuehtml
       value updated to include an error message.
    """
    try:
        results = outcome['testresults']
        col_num = results[0].index('Got')
        for i in range(len(test_cases)):
            if test_cases[i].expected.strip() == '':
                test_cases[i].expected = results[i + 1][col_num]
    except ValueError:
        outcome['prologuehtml'] = "No 'Got' column in result table from which to get testcase expecteds"
        test_cases = None
    except Exception as e:
        outcome['prologuehtml'] = "Unexpected error ({}) extracting testcase expecteds from sample answer output".format(e)
        test_cases = None
    return test_cases


def get_expecteds_from_answer(params, test_cases):
    """Run all tests using the sample answer rather than the student answer.
       Fill in the expected field of each test case using the sample answer and return
       the updated test case list.
       Return None if the sample answer gave any sort of runtime error
    """
    new_params = {key: value for key, value in params.items()}
    new_params['IS_PRECHECK'] = False
    new_params['nostylechecks'] = True
    new_params['STUDENT_ANSWER'] = get_answer()
    new_params['resultcolumns'] = [['Test', 'testcode'], ['Got', 'got']]  # Ensure we have a Got column.
    new_params['running_sample_answer'] = True
    tester = PyTester(new_params, test_cases)
    outcome = tester.test_code()
    if 'prologuehtml' in outcome:
        outcome['prologuehtml'] = "<h2>ERROR IN QUESTION'S SAMPLE ANSWER. PLEASE REPORT</h2>\n" + outcome['prologuehtml']
        return outcome, None
    else:
        return outcome, update_test_cases(test_cases, outcome)


process_template_params()
test_cases = get_test_cases()
process_global_params()

if PARAMS['useanswerfortests']:
    outcome, test_cases = get_expecteds_from_answer(PARAMS, test_cases)

if test_cases:
    tester = PyTester(PARAMS, test_cases)
    outcome = tester.test_code()
    feedback = ''
    parsons_threshold = float('inf') if PARAMS['parsonsproblemthreshold'] is None else PARAMS['parsonsproblemthreshold']
    if outcome['fraction'] != 1 and not PARAMS['IS_PRECHECK'] and PARAMS['STEP_INFO']['numchecks'] + 1 >= parsons_threshold:
        feedback = PARAMS['AUTHOR_ANSWER_SCRAMBLED']
    elif outcome['fraction'] == 1 and PARAMS['showfeedbackwhenright'] and not (PARAMS['IS_PRECHECK']):
        outcome['prologuehtml'] = '<pre class="ace-highlight-code" style="display:none"></pre>'  # Kick filter into life
        feedback = PARAMS['AUTHOR_ANSWER']
    if feedback:
        if 'epiloguehtml' in outcome:
            if outcome['epiloguehtml'].strip():
                outcome['epiloguehtml'] += '<br>'
        else:
            outcome['epiloguehtml'] = ''
        outcome['epiloguehtml'] += f'<div style="background-color: #f4f4f4">{feedback}</div>'
print(json.dumps(outcome))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>1</allowmultiplestdins>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox>jobesandbox</sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs>50</cputimelimitsecs>
    <memlimitmb>1500</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <extractcodefromjson>1</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>scratchpad</uiplugin>
    <uiparameters><![CDATA[{
    "wrapper_src": "prototypeextra",
    "output_display_mode": "json",
    "escape": true
}]]></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra><![CDATA[import ast, traceback, sys, io, subprocess, base64, os, ast, traceback, json, re
MAX_OUTPUT_CHARS = 30000
RUN_ERROR_PATTERNS = [
    (r'(.*<fstring>.* \(syntax-error\).*)', []),
    (r'(.*File ".*", line +)(\d+)(, in .*)', [2]),
    (r'(.*: *)(\d+)(, *\d+:.*\(.*line +)(\d+)(\).*)', [2, 4]),
    (r'(.*: *)(\d+)(, *\d+:.*\(.*\).*)', [2]),
    (r'(.*:)(\d+)(:\d+: [A-Z]\d+: .*line )(\d+)(.*)', [2, 4]),
    (r'(.*:)(\d+)(:\d+: [A-Z]\d+: .*)', [2]),
]
SYNTAX_ERROR_PATTERNS = [
    (r'(.*File "<unknown>", line +)(\d+)', [2]),
]

answer_code = """{| ANSWER_CODE |}"""
answer_code_len = len(answer_code.splitlines())
if answer_code_len > 0 and answer_code[-1] != '\n':
    answer_code += '\n'
scratchpad_code = """{| SCRATCHPAD_CODE |}"""
student_code = answer_code + scratchpad_code

uses_matplotlib = 'matplotlib' in student_code

subproc_code = """
import sys
MAX_OUTPUT_CHARS = 30000
__saved_input__ = input

def input(prompt=''):
    try:
        line = __saved_input__()
    except EOFError:
        print(prompt, end = '')
        sys.stderr.flush()
        sys.stdout.flush()
        sys.exit(42)
    print(prompt, end='')
    print(line)
    return line

input.__doc__ = __saved_input__.__doc__

__saved_print__ = print
__output_chars__ = 0

def print(*params, **keyparams):
    global __output_chars__
    for param in params:
        try:
            __output_chars__ += len(str(param))
        except:
            pass
    if __output_chars__ > 2 * MAX_OUTPUT_CHARS:
        __saved_print__("\\\\n*** Excessive output. Job aborted ***", file=sys.stderr)
        sys.exit(1)
    else:
        __saved_print__(*params, **keyparams)

print.__doc__ = __saved_print__.__doc__
"""


if uses_matplotlib:
    subproc_code += """
import os, tempfile, sys
os.environ["MPLCONFIGDIR"] = tempfile.mkdtemp()
import matplotlib as _mpl
_mpl.use("Agg")
"""

subproc_code += student_code

if uses_matplotlib:
    subproc_code += """
figs = _mpl.pyplot.get_fignums()
for i, fig in enumerate(figs):
    _mpl.pyplot.figure(fig)
    filename = f'image{i}.png'
    _mpl.pyplot.savefig(filename, bbox_inches='tight')
"""

def b64encode(filename):
    """Return the contents of the given file in base64"""
    with open(filename, "br") as fin:
        contents = fin.read()
    contents_b64 = base64.b64encode(contents).decode("utf8")
    return contents_b64

def truncated(s):
    return s if len(s) < MAX_OUTPUT_CHARS else s[:MAX_OUTPUT_CHARS] + ' ... (truncated)'

def check_syntax():
    try:
        ast.parse(student_code)
        return ''
    except SyntaxError:
        catcher = io.StringIO()
        traceback.print_exc(limit=0, file=catcher)
        return catcher.getvalue()
    
def fix_errors(stderr, code, error_patterns):
    """Try to fix line numbers of any error messages. Return fixed stderr."""
    try:
        offset = code.index(student_code)
        line_offset = len(code[:offset].splitlines())
    except:
        return stderr

    output_lines = []
    for line in stderr.splitlines():
        for pattern, line_group_nums in error_patterns:
            match = re.match(pattern, line)
            if match:
                line = ''
                for i, group in enumerate(match.groups(), 1):
                    if i in line_group_nums:
                        linenum = int(match.group(i))
                        adjusted = linenum - line_offset
                        str_adjusted = str(adjusted)
                        if answer_code_len > 0 and adjusted > answer_code_len:
                            str_adjusted += f" (line {adjusted - answer_code_len} in scratchpad)"
                        line += str_adjusted
                    else:
                        line += group
                break

        output_lines.append(line)
    return '\n'.join(output_lines)

stdout = ''
stderr = check_syntax()
if stderr == '':  # No syntax errors
    program_code = subproc_code
    with open('prog.py', 'w') as outfile:
        outfile.write(program_code)
    proc = subprocess.Popen([sys.executable, 'prog.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    try:
        stdout, stderr = proc.communicate(timeout=3)
        returncode = proc.returncode
    except subprocess.TimeoutExpired:
        proc.kill()
        stdout, stderr = proc.communicate()
        returncode = 13

    stderr = fix_errors(stderr, program_code, RUN_ERROR_PATTERNS)

else:
    stderr = fix_errors(stderr, student_code, SYNTAX_ERROR_PATTERNS)
    returncode = 1 # Syntax errors

# Pick up any .png or .jpg image files.
image_extensions = ['png', 'jpg', 'jpeg']
image_files = [fname for fname in os.listdir() if fname.lower().split('.')[-1] in image_extensions]
files = {fname: b64encode(fname) for fname in image_files}

output = {
    'returncode': returncode,
    'stdout' : truncated(stdout),
    'stderr' : truncated(stderr),
    'files'  : files
}

print(json.dumps(output))
]]></prototypeextra>
    <testcases>
<file name="__author_solution.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgZ29vZCI+CiAgICA8YSBjbGFzcz0iYnRuIGJ0bi1saW5rIGNvZGVydW5uZXItc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0NGQyI+U2hvdyBhdXRob3IncyBzb2x1dGlvbjwvYT4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvZGVydW5uZXItYXV0aG9ycy1zb2x1dGlvbiBjb2xsYXBzZSIgZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTo4cHgiPgogICAgPHByZSBjbGFzcz0iY29kZS1oaWdobGlnaHQiPiVzPC9wcmU+CjwvZGl2Pgo8c2NyaXB0PgogICAgd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkID0gd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkIHx8IGZ1bmN0aW9uKHNyYykgewogICAgICAgIHZhciBxdWVzdGlvbiA9IHNyYy50YXJnZXQuY2xvc2VzdCgnZGl2LnNwZWNpZmljZmVlZGJhY2snKTsKICAgICAgICB2YXIgc29sdXRpb25fZGl2ID0gcXVlc3Rpb24uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29kZXJ1bm5lci1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNvbHV0aW9uLWxpbmsnKVswXTsKICAgICAgICB2YXIgY29kZSA9IHF1ZXN0aW9uLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvZGUtaGlnaGxpZ2h0JylbMF07CgogICAgICAgIGlmICghY29kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2hhcy1oaWdobGlnaHQnKSkgewogICAgICAgICAgICB2YXIgaGlnaGxpZ2h0ID0gd2luZG93LmFjZS5yZXF1aXJlKCJhY2UvZXh0L3N0YXRpY19oaWdobGlnaHQiKTsKICAgICAgICAgICAgaGlnaGxpZ2h0KGNvZGUsIHsKICAgICAgICAgICAgICAgIG1vZGU6ICJhY2UvbW9kZS9weXRob24iLAogICAgICAgICAgICAgICAgc2hvd0d1dHRlcjogZmFsc2UKICAgICAgICAgICAgfSwgZnVuY3Rpb24oaGlnaGxpZ2h0ZWQpIHsKICAgICAgICAgICAgICAgIGNvZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWNlX3N0YXRpY19oaWdobGlnaHQnKVswXS5zdHlsZVsnZm9udC1zaXplJ10gPSAiMTRweCI7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb2RlLmNsYXNzTGlzdC5hZGQoJ2hhcy1oaWdobGlnaHQnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKCFzb2x1dGlvbl9kaXYuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb2xsYXBzaW5nJykpIHsKICAgICAgICAgICAgaWYgKHNvbHV0aW9uX2Rpdi5nZXRBdHRyaWJ1dGUoImV4cGFuZGVkIikgPT09ICJ0cnVlIikgewogICAgICAgICAgICAgICAgc29sdXRpb25fbGluay5pbm5lckhUTUwgPSAiU2hvdyBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9kaXYuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2Rpdi5zZXRBdHRyaWJ1dGUoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2Rpdi5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2Rpdi5zZXRBdHRyaWJ1dGUoImV4cGFuZGVkIiwgInRydWUiKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHZhciBjb2RlcnVubmVyX2FsbF9saW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvZGVydW5uZXItc29sdXRpb24tbGluaycpOwogCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVydW5uZXJfYWxsX2xpbmtzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGVsID0gY29kZXJ1bm5lcl9hbGxfbGlua3NbaV07CiAgICAgICAgaWYgKCFlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hhcy1jbGljay1oYW5kbGVyJykpIHsKICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQpOwogICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdoYXMtY2xpY2staGFuZGxlcicpOwogICAgICAgIH0KICAgIH0gICAgCjwvc2NyaXB0PgoK</file>
<file name="__author_solution_scrambled.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgYmFkIj4KICAgIDxhIGNsYXNzPSJidG4gYnRuLWxpbmsgY29kZXJ1bm5lci1zY3JhbWJsZWQtc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0ZDQyI+U2hvdyBzY3JhbWJsZWQgYXV0aG9yJ3Mgc29sdXRpb248L2E+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uIGNvbGxhcHNlIiBleHBhbmRlZD0iZmFsc2UiIHN0eWxlPSJtYXJnaW4tYm90dG9tOjhweCI+CiAgICA8cHJlIGNsYXNzPSJjb2RlLWhpZ2hsaWdodCI+JXM8L3ByZT4KPC9kaXY+CjxzY3JpcHQ+CiAgICB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgPSB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgfHwgZnVuY3Rpb24oc3JjKSB7CiAgICAgICAgdmFyIHF1ZXN0aW9uID0gc3JjLnRhcmdldC5jbG9zZXN0KCdkaXYuc3BlY2lmaWNmZWVkYmFjaycpOwogICAgICAgIHZhciBzb2x1dGlvbl9kaXYgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJylbMF07CiAgICAgICAgdmFyIGNvZGUgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlLWhpZ2hsaWdodCcpWzBdOwoKICAgICAgICBpZiAoIWNvZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdoYXMtaGlnaGxpZ2h0JykpIHsKICAgICAgICAgICAgdmFyIGhpZ2hsaWdodCA9IHdpbmRvdy5hY2UucmVxdWlyZSgiYWNlL2V4dC9zdGF0aWNfaGlnaGxpZ2h0Iik7CiAgICAgICAgICAgIGhpZ2hsaWdodChjb2RlLCB7CiAgICAgICAgICAgICAgICBtb2RlOiAiYWNlL21vZGUvcHl0aG9uIiwKICAgICAgICAgICAgICAgIHNob3dHdXR0ZXI6IGZhbHNlCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGhpZ2hsaWdodGVkKSB7CiAgICAgICAgICAgICAgICBjb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjZV9zdGF0aWNfaGlnaGxpZ2h0JylbMF0uc3R5bGVbJ2ZvbnQtc2l6ZSddID0gIjE0cHgiOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29kZS5jbGFzc0xpc3QuYWRkKCdoYXMtaGlnaGxpZ2h0Jyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmICghJChzb2x1dGlvbl9kaXYpLmhhc0NsYXNzKCdjb2xsYXBzaW5nJykpIHsKICAgICAgICAgICAgaWYgKCQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIpID09PSAidHJ1ZSIpIHsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2xpbmsuaW5uZXJIVE1MID0gIlNob3cgc2NyYW1ibGVkIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5jb2xsYXBzZSgnaGlkZScpOwogICAgICAgICAgICAgICAgJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIHNjcmFtYmxlZCBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuY29sbGFwc2UoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIsICJ0cnVlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICB2YXIgY29kZXJ1bm5lcl9hbGxfbGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJyk7CiAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXJ1bm5lcl9hbGxfbGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZWwgPSBjb2RlcnVubmVyX2FsbF9saW5rc1tpXTsKICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGFzLWNsaWNrLWhhbmRsZXInKSkgewogICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHdpbmRvdy5jb2RlcnVubmVyX3NvbHV0aW9uX2xpbmtfY2xpY2tlZCk7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1jbGljay1oYW5kbGVyJyk7CiAgICAgICAgfQogICAgfSAgICAKPC9zY3JpcHQ+Cgo=</file>
<file name="__languagetask.py" path="/" encoding="base64">IiIiVGhlIGdlbmVyaWMgTGFuZ3VhZ2VUYXNrLCBzdWJjbGFzc2VzIG9mIHdoaWNoIG1hbmFnZSBjb21waWxpbmcgYW5kIGV4ZWN1dGluZwogICBjb2RlIGluIGEgcGFydGljdWxhciBsYW5ndWFnZS4KIiIiCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpXQVRDSERPR19GUkVFQk9BUkQgPSAxCgpjbGFzcyBDb21waWxlRXJyb3IoRXhjZXB0aW9uKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKToKICAgICAgICBFeGNlcHRpb24uX19pbml0X18oc2VsZiwgZXJyb3JfbWVzc2FnZSkKCgpjbGFzcyBSdW5FcnJvcihFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGVycm9yX21lc3NhZ2U9JycpOgogICAgICAgIEV4Y2VwdGlvbi5fX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKQoKY2xhc3MgTGFuZ3VhZ2VUYXNrOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmFtcywgY29kZT1Ob25lKToKICAgICAgICAiIiJJbml0aWFsaXNlIHRoZSBvYmplY3QsIHJlY29yZGluZyB0aGUgcGFyYW1ldGVycyB0aGF0IHdpbGwgY29udHJvbCBjb21waWxhdGlvbiBhbmQKICAgICAgICAgICBydW5uaW5nIHBsdXMgdGhlIGNvZGUgaWYgc3VwcGxpZWQuIENvZGUgbWF5IGJlIGFsdGVybmF0aXZlbHkgYmUgc3VwcGxpZWQgbGF0ZXIgYnkKICAgICAgICAgICBjYWxscyB0byBzZXRfY29kZS4KICAgICAgICAgICBzZWxmLnBhcmFtcyBpcyB0aGUgZGljdGlvbmFyeSBvZiB0ZW1wbGF0ZSAmIGdsb2JhbCBwYXJhbWV0ZXJzIC0gbGFuZ3VhZ2Ugc3BlY2lmaWMuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5wYXJhbXMgPSBwYXJhbXMKICAgICAgICBzZWxmLmNvZGUgPSBjb2RlCiAgICAgICAgc2VsZi5leGVjdXRhYmxlX2J1aWx0ID0gRmFsc2UKICAgICAgICBzZWxmLmNvbXBpbGVfZXJyb3JfbWVzc2FnZSA9IE5vbmUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gMAogICAgICAgIHNlbGYuc3RkZXJyID0gJycKICAgICAgICBzZWxmLnN0ZG91dCA9ICcnCiAgICAgICAgc2VsZi5zdGFydF90aW1lID0gZGF0ZXRpbWUubm93KCkKICAgICAgICBzZWxmLnRpbWVkX291dCA9IEZhbHNlCiAgICAgICAgaWYgJ3RvdGFsdGltZW91dCcgbm90IGluIHBhcmFtczoKICAgICAgICAgICAgc2VsZi5wYXJhbXNbJ3RvdGFsdGltZW91dCddID0gMzAgIyBTZWNzCgogICAgZGVmIHNlY29uZHNfcmVtYWluaW5nKHNlbGYpOgogICAgICAgICIiIlRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBleGVjdXRpb24gdGltZSByZW1haW5pbmcgYmVmb3JlIHRoZSB3YXRjaGRvZyB0aW1lciBnb2VzIG9mZi4KICAgICAgICAgICBUaGUgd2F0Y2hkb2cgdGltZXIgZ29lcyBvZmYgMSBzZWNvbmQgYmVmb3JlIHJ1bmd1YXJkIGtpbGxzIHRoZSBqb2IgKGFzIGRldGVybWluZWQgYnkgdGhlICd0aW1lb3V0JyBwYXJhbWV0ZXIpLgogICAgICAgICIiIgogICAgICAgIHRfZWxhcHNlZCA9IChkYXRldGltZS5ub3coKSAtIHNlbGYuc3RhcnRfdGltZSkudG90YWxfc2Vjb25kcygpCiAgICAgICAgcmV0dXJuIHNlbGYucGFyYW1zWyd0b3RhbHRpbWVvdXQnXSAtIHRfZWxhcHNlZCAtIFdBVENIRE9HX0ZSRUVCT0FSRAoKICAgIGRlZiBzZXRfY29kZShzZWxmLCBjb2RlLCBlcnJvcl9tZXNzYWdlX29mZnNldD0wKToKICAgICAgICAiIiJTZXQgdGhlIGNvZGUgdG8gYmUgdXNlZCBmb3Igc3Vic2VxdWVudCBjb21waWxpbmcgYW5kIHJ1bm5pbmcuIFRoZSBvcHRpb25hbCBlcnJvcl9tZXNzYWdlX29mZnNldAogICAgICAgICAgIGlzIGEgbnVtYmVyIHRvIGJlIHN1YnRyYWN0ZWQgZnJvbSBhbnkgZXJyb3IgbWVzc2FnZXMgZ2VuZXJhdGVkIGJ5IGNvbXBpbGUgYW5kIHJ1bl9jb2RlIGNhbGxzLgogICAgICAgICAgIEV4YWN0bHkgaG93IChvciBldmVuICdpZicpIGl0IGlzIHVzZWQgaXMgbGFuZ3VhZ2UgZGVwZW5kZW50LgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29kZSA9IGNvZGUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gZXJyb3JfbWVzc2FnZV9vZmZzZXQKCiAgICBkZWYgY29tcGlsZShzZWxmLCBtYWtlX2V4ZWN1dGFibGU9RmFsc2UpOgogICAgICAgICIiIkNvbXBpbGUgdGhlIGN1cnJlbnRseSBzZXQgY29kZSwgZWl0aGVyIHRvIGFuIG9iamVjdCBmaWxlIG9yCiAgICAgICAgICAgdG8gYW4gZXhlY3V0YWJsZSBmaWxlIGRlcGVuZGluZyBvbiB0aGUgZ2l2ZW4gbWFrZV9leGVjdXRhYmxlIHBhcmFtZXRlci4KICAgICAgICAgICBBZGp1c3QgYW55IGVycm9yIG1lc3NhZ2UgYnkgc3VidHJhY3RpbmcgZXJyb3JfbWVzc2FnZV9vZmZzZXQuCiAgICAgICAgICAgUmFpc2UgQ29tcGlsZUVycm9yIGlmIHRoZSBjb2RlIGRvZXMgbm90CiAgICAgICAgICAgY29tcGlsZSwgd2l0aCB0aGUgY29tcGlsYXRpb24gZXJyb3IgbWVzc2FnZSB3aXRoaW4gdGhlIGV4Y2VwdGlvbgogICAgICAgICAgIGFuZCBhbHNvIHJlY29yZGVkIGluIHNlbGYuY29tcGlsZV9lcnJvcl9tZXNzYWdlLgogICAgICAgICAgIE5vIHJldHVybiB2YWx1ZS4KICAgICAgICAiIiIKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJjb21waWxlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIpCgogICAgZGVmIGRpc2NhcmRfZXhlY3V0YWJsZShzZWxmKToKICAgICAgICAiIiJDYWxsZWQgaWYgc29tZXRoaW5nIGJyZWFrcyBpbiB0aGUgZXhlY3V0YWJsZSBhbmQgaXQgd2lsbCBuZWVkIHJlYnVpbGRpbmcKICAgICAgICAgICAod2l0aCBkaWZmZXJlbnQgc291cmNlLCBwcmVzdW1hYmx5KQogICAgICAgICIiIgogICAgICAgIHNlbGYuZXhlY3V0YWJsZV9idWlsdCA9IEZhbHNlCgogICAgZGVmIHJ1bl9jb2RlKHNlbGYsIHN0YW5kYXJkX2lucHV0PU5vbmUsIGJhc2hfY29tbWFuZD1Ob25lKToKICAgICAgICAiIiJSdW4gdGhlIGNvZGUgaW4gdGhlIGV4ZWN1dGFibGUgcHJvZ3JhbSB0aGF0IGEgY2FsbCB0byBjb21waWxlIGlzIGFzc3VtZWQKICAgICAgICAgICB0byBoYXZlIGNyZWF0ZWQsIHVzaW5nIHRoZSBnaXZlbiBzdGFuZGFyZCBpbnB1dC4KICAgICAgICAgICBJZiBhIGJhc2hfY29tbWFuZCBpcyBzdXBwbGllZCBpdCB1c2VkIGFzIGdpdmVuLgogICAgICAgICAgIE90aGVyd2lzZSB0aGUgY29tbWFuZCB0byBiZSBleGVjdXRlZCBpcyB0aGUgY29tcGlsZWQgZXhlY3V0YWJsZS4KICAgICAgICAgICBSZXR1cm5zIGEgdHVwbGUgb2YgdGhlIG91dHB1dCBmcm9tIHRoZQogICAgICAgICAgIHJ1biBhbmQgYSBzdGRlcnIgKG9yIGEgZGVyaXZhdGl2ZSB0aGVyZW9mKSBzdHJpbmcuIFRob3NlIHR3byB2YWx1ZXMKICAgICAgICAgICBhcmUgYWxzbyByZWNvcmRlZCBpbiBzZWxmLnN0ZG91dCBhbmQgc2VsZi5zdGRlcnIgcmVzcGVjdGl2ZWx5LgogICAgICAgICIiIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoInJ1bl9jb2RlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIp</file>
<file name="__plottools.py" path="/" encoding="base64"></file>
<file name="pyproject.toml" path="/" encoding="base64">W3Rvb2wucnVmZl0KbGluZS1sZW5ndGggPSAxMDAKaW5kZW50LXdpZHRoID0gNApvdXRwdXQtZm9ybWF0ID0gJ3B5bGludCcKClt0b29sLnJ1ZmYubGludC5weWxpbnRdCm1heC1icmFuY2hlcyA9IDEwCgpbdG9vbC5ydWZmLmxpbnRdIApzZWxlY3QgPSBbIkEwMCIsIAogICAgICAgICAgIkFSRyIsICAKICAgICAgICAgICJCMDE1IiwgIkIwMTgiLCAiQjAyMCIsIAogICAgICAgICAgIkQxIiwgCiAgICAgICAgICAiRTEiLCAiRTUiLCAiRTcwMSIsICJFNzAyIiwgIkU3MDMiLCAiRTcxMSIsICJFNzIyIiwgCiAgICAgICAgICAiRiIsIAogICAgICAgICAgIklTQzAwMSIsICAgCiAgICAgICAgICAiTiIsIAogICAgICAgICAgIlBMRSIsICJQTFIwOTEyIiwgIlBMVzA2MDMiLCAiUExXMTUwMSIsICJQTFczMjAxIiwgCiAgICAgICAgICAiUzMwNyIsICAKICAgICAgICAgICJSRVQ1MDMiLCAgCiAgICAgICAgICBdIAppZ25vcmUgPSBbIkQxMDUiLCAiRDEwNyIsICJFMTE3IiwgIkY0MDEiLCAiRjg0MSJdIApwcmV2aWV3ID0gdHJ1ZSAK</file>
<file name="__pystylechecker.py" path="/" encoding="base64"></file>
<file name="__pytask.py" path="/" encoding="base64"></file>
<file name="pytester.py" path="/" encoding="base64"></file>
<file name="__resulttable.py" path="/" encoding="base64"></file>
<file name="__tester.py" path="/" encoding="base64"></file>
<file name="__watchdog.py" path="/" encoding="base64">IyEvdXNyL2Jpbi9weXRob24KIyBmaWxlOiB3YXRjaGRvZy5weQojIGxpY2Vuc2U6IE1JVCBMaWNlbnNlCiMgRnJvbSBodHRwczovL2R6b25lLmNvbS9hcnRpY2xlcy9zaW1wbGUtcHl0aG9uLXdhdGNoZG9nLXRpbWVyCgppbXBvcnQgc2lnbmFsCgpjbGFzcyBXYXRjaGRvZyhFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRpbWUpOgogICAgICAgICIiIlNldCB1cCBhIHRpbWVyIGFsYXJtIHRvIGdvIG9mZiBpbiAndGltZScgc2Vjcy4iIiIKICAgICAgICBzZWxmLnRpbWUgPSB0aW1lCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICAiIiJDYWxsZWQgb24gZW50ZXJpbmcgYSAnd2l0aCcgYmxvY2siIiIKICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdBTFJNLCBzZWxmLmhhbmRsZXIpCiAgICAgICAgc2lnbmFsLmFsYXJtKHNlbGYudGltZSkKCiAgICBkZWYgX19leGl0X18oc2VsZiwgdHlwZSwgdmFsdWUsIHRyYWNlYmFjayk6CiAgICAgICAgIiIiRXhpdGluZyB0aGUgd2l0aCBibG9jay4gQ2FuY2VsIHRoZSB3YXRjaGRvZyIiIgogICAgICAgIHNpZ25hbC5hbGFybSgwKQoKICAgIGRlZiBoYW5kbGVyKHNlbGYsIHNpZ251bSwgZnJhbWUpOgogICAgICAgICIiIkFsYXJtIHdlbnQgb2ZmLiBSYWlzZSBXYXRjaGRvZyBleGNlcHRpb24iIiIKICAgICAgICByYWlzZSBzZWxmCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuICJXYXRjaGRvZyB0aW1lciBleHBpcmVkIGFmdGVyIHt9IHNlY3MiLmZvcm1hdChzZWxmLnRpbWUpCg==</file>
    </testcases>
  </question>

</quiz>