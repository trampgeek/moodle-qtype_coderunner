<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 32177  -->
  <question type="coderunner">
    <name>
      <text>PROTOTYPE_python3_test_table</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p> Prototype for a COSC131 Python3 question that asks students to fill out parts of a table of tests, like that normally given to them as the "For example" table. The correctness of the student's tests is assessed by running all the tests using a correct function written by the question author.</p>
<p>To create such questions:</p>
<ol>
<li>Create a new CodeRunner question.</li>
<li>Set the type to <em>python3_test_table</em></li>
<li>In the <em>Question text</em> part of the form, define the function that is to be tested and invite the student to fill out the test table supplied in the answer box.</li>
<li>Save-and-continue-editing.</li>
<li>Navigate to the <em>Answer preload</em> section.</li>
<li>Set <em>Lines per cell</em> to the maximum value you'll need in any of the test rows.</li>
<li>Click <em>Add row</em> as necessary to get the required number of tests.</li>
<li>Fill out at as much of the table as you feel is appropriate. In the above example only two cells are left empty for the student to fill out.
<ul>
<li>As a special case, you can have a test that is not empty but contains one or more occurrences of the string '???'. These cells will not be readonly - the student will be expected to replace the '???' occurrences with a suitable substring. 
<ul>
<li>A regular-expression match is applied using the given test code as a pattern, after escaping with re.escape(), enclosing in '^' and '$' and replace all occurrences of '???' with '.*'.</li>
<li>If there is a template parameter <em>testre</em> this must still match, too.</li>
</ul>
</li>
</ul>
</li>
<li>Choose whatever header  you wish to have </li>
<li>Type ctrl-alt-m and copy the contents of the serialised answer-preload field.</li>
<li>Paste saved contents into the  <em>Answer </em>field of the question authoring form.</li>
<li>Type ctrl-alt-m again to turn the UI back on.</li>
<li>Fill in the still-empty fields that the student is required to supply.</li>
<li>Enter a correct definition of the function into the <em>Code for validating student's tests</em> field.</li>
<li>Save the question. It should save correctly, but if not you have an error in your answer. Turn off validate-on-save, save the question, and preview it to find out what you did wrong.</li>
<li>If there is extra grey space below the bottom of the table, reduce the number of rows allocated for the answer.</li>
</ol>
<p>A template parameter <em>hiderunresulttable</em> (which defaults to <em>true</em>) can be set by the question author to <em>false</em> temporarily to see the output when debugging their program!</p>
<p>A template parameter <em>testre </em>can be used to specify a regular expression that any user-supplied tests must contain somewhere within it. . The re.search() method is used to find the given re, using re.DOTALL so that '.' matches anything including a newline. You can use "^.*" at the start and ".*$" at the end to match the whole string.</p>
<p>If using the <em>testre</em> parameter, you should make sure the question explains the expected test format; the error messages do not tell the students what regular expression is being used (since they're not expected to understand RE syntax). Since there is no equivalent of a raw string in JSON, you will need lots of '\\' in your string. For example, in the num_doublings example, if the test must call num_doublings with two integer parameters and must then call print (with any argument, so still not a secure check), you could use the template parameter specification:</p>
<p><code>{"testre": "num_doublings\\(\\d+, \\d+\\).*\\nprint\\(.*\\)"}</code></p>
<p>Most of the template parameters used by standard Python3 question types, such as <em>python3_scratchpad</em>, are also available but rarely needed in this question type.</p>]]></text>
<file name="blobid0 (1).png" path="/" encoding="base64"></file>
<file name="blobid0.png" path="/" encoding="base64"></file>
<file name="image.png" path="/" encoding="base64">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GKoTWs+FhP2HeaCh7V59yjegqf8vxO7+jaCQgEvnp+jjEREREREREfmz0n8sn0sDejzblIGzFvNFy7fpUiOYqMkTuD96KdGvruXM/1zwDnyIqGFP4A0Q1JtXB8GHK6fzUnQOuHji32Qoo3r629rze5LXJjoQ/eEKXh80C4uDJ/5NnmJ4N3/biLghgIguTUn4ZBavHH2Ctwqv1F/+QXqNSGXOoiVMetmCi28oj3R5EtYfIOdXwL3oQ/LrMoZRefP4eN7LrLyQh8Pf/Wna83Wiml9eUc+vfgPc1qdSP/TiqgIu1G0SgON/XAgKKjB2X9TxiIiIiIiIiFzFPWnZOX/czI6nUk6WdC1Siqr4Vi3tEkRERERERKQElfKUfhERERERERG5HRT4RUREREREROyQAr+IiIiIiIiIHVLgFxEREREREbFDCvwiIiIiIiIidkiBX0RERERERMQO3XTgNxgMRW8kZYI+SxEREREREftz04Hf6GQsyTqkFOmzFBERERERsT83Hfidy7lwzz33lGQtUgruuecenMu5lHYZIiIiIiIiUsJuOvA7Gh25z/k+hf4y7J577uE+5/twNDqWdikiIiIiIiJSwm5p0b4K7m44ODoo9JdB99xzDw6ODlRwdyvtUkREREREROQ2uOVV+t0re2ikv4y5OLLvXtmjtEsRERERERGR2+SetOycP0qioTxzHqbsHMy5ZqxWa0k0KSXMYDBgdDLiXM5F0/hFRERERETs3L0l1ZCj0VEhUkREREREROQucctT+kVERERERETk7qPALyIiIiIiImKHFPhFRERERERE7JACv4iIiIiIiIgduulF+7aujynJOkRERERERESkkPCHI29631tapb9t27a3sruIiIiIiIiIXMPGjRtvaX9N6RcRERERERGxQwr8IiIiIiIiInZIgV9ERERERETEDinwi4iIiIiIiNghBX4RERERERERO6TALyIiIiIiImKHFPhFRERERERE7JACv4iIiIiIiIgdUuAXERERERERsUMK/CIiIiIiIiJ2SIFfRERERERExA4p8IuIiIiIiIjYIQV+OxH7RkvcAoNwqzeQpZmlXY2IiIiIiIiUtnvvSC/fjaLawPVkXXMDIx2mfsuSR8vdkXJERERERERE7J1G+EVERERERETs0J0Z4b/ESNCzM5nziMef3nH11ei+iIiIiIiI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wvoy6JoXQIw0eGEiw/fbHsuXsGoKj60q8LbBnZU7TtK5y1VurxAREREREZEy7y4a4QcMVXlm+lJWvtyRsJruuBqNOLlVJajFU0xfvIjZrd2LbuMafJ+Yyab5o+nzkD++bkYwGHH1CaZDrwls/Hg4Yc4nWfTuChLMQLkWDH/eNtsg6LnBdKkKWE+y6p2P2GOGWr3eZ9WYjoT5lcPJaMTVryHPvDKcZ3xsfZ05mpQ/G6CkGAnrNZrhrf3xdDbi5O5H2FMTWDm1I77X261cMGMXL2XJ4Ifzzyfg7E6tph2Z9P5Slirsi4iIiIiI2K170rJz/riZHbeuj6Ft27YlXY8U9O8ZhDz7L1KsRsJe28AXT938BQ8REREREREpWzZu3Ej4w5E3vf/dNcIvIiIiIiIiIiVCgV9ERERERETEDinwi4iIiIiIiNihu2qVfink/4az/+Dw0q5CREREREREyiCN8IuIiIiIiIjYIQV+ERERERERETukwC8iIiIiIiJihxT4RUREREREROyQAr+IiIiIiIiIHVLgFxEREREREbFDCvwiIiIiIiIidkiBX0RERERERMQO3XsnOjE6/34nuhERERERERG565lNdySKa4RfRERERERExB4p8IuIiIiIiIjYIQV+ERERERERETukwC8iIiIiIiJihxT4RUREREREROyQAr+IiIiIiIiIHVLgFxEREREREbFDCvwiIiIiIiIidkiBX0RERERERMQO3VvaBRR0Oi2vtEsQEREREbnEq7JjaZcgInLT7qrAD/pSFRG5VafT8vRdKiJSAjQYJSJlnab0i4iIiIiIiNghBX4RERERERERO6TALyIiIiIiImKHFPhFRERERERE7JACv4iIiIiIiIgdUuAXERERERERsUN33WP5ADg0h/Zdl5FsvfYm9YYu59MXqt2xkkREyqQL6+jbeApbC3yfGo334x0QSpuofrzQrhrGO1HH5vGEDtqEuc5gNqzpjved6FNERETkL+7uHOF3rkJgSB0ah9ShcUg1PABwxLvmxdfqUMPzVp8x/SufdG9CrdrhDPpCz1gVEXvniHeA7fszsDKc2P8984YOYnTMr6VTjnkTg4KaUCuwL5+cLJ0SREREROzd3TnC79eJGcs62f5t/Z7hoa+yzuROm8kfMCqkdEsTESmTDNXoMv0DBtQE+I2to5+i75pf2bTye9Ij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</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>python3_test_table</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>60</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cr_tt_linesperrow":["2"],"cr_readonly_cells":["{}"],"cr_test_table_hdr":["Examples"],"test_table_col0":[""],"test_table_col1":[""],"main_answer_code":[""]}]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import locale
import json
import os
import re
import html
import random

from pytester import PyTester

STANDARD_PYLINT_OPTIONS = ['--disable=trailing-whitespace,superfluous-parens,' + 
                      'too-few-public-methods,consider-using-f-string,' + 
                      'unbalanced-tuple-unpacking,too-many-statements,' + 
                      'consider-using-enumerate,simplifiable-if-statement,' + 
                      'consider-iterating-dictionary,trailing-newlines,no-else-return,' + 
                      'consider-using-dict-comprehension,consider-using-generator,' + 
                      'len-as-condition,inconsistent-return-statements,consider-using-join,' + 
                      'singleton-comparison,unused-variable,chained-comparison,no-else-break,' + 
	                  'consider-using-in,useless-object-inheritance,unnecessary-pass,' + 
	                  'reimported,wrong-import-order,wrong-import-position,ungrouped-imports,' + 
                      'consider-using-set-comprehension,no-else-raise,' + 
                      'unspecified-encoding,use-dict-literal,,consider-using-with,' + 
                      'duplicate-string-formatting-argument,consider-using-dict-items,' + 
                      'consider-using-max-builtin,use-a-generator ', 
                      '--good-names=i,j,k,n,s,c,_' 
                      ] 


locale.setlocale(locale.LC_ALL, 'C.UTF-8')

KNOWN_PARAMS = {
    'abortonerror': True,
    'allowglobals': False,
    'banglobalcode': True,
    'allownestedfunctions': False,
    'checktemplateparams': True,
    'dpi': 65,
    'echostandardinput': True,
    'extra': 'None',
    'floattolerance': None,
    'forcepylint': False,
    'globalextra': 'None',
    'hiderunresulttable': True,
    'imagewidth': None,
    'imports': [],
    'isfunction': True,
    'localprechecks': True,
    'maxfunctionlength': 30,
    'maxnumconstants': 4,
    'maxoutputbytes': 10000,
    'maxstringlength': 2000,
    'norun': False,
    'nostylechecks': False,
    'notest': False,
    'parsonsproblemthreshold': None, # The number of checks before parsons' problem displayed
    'precheckers': ['pylint'],
    'prelude': '',
    'proscribedbuiltins': ['exec', 'eval'],
    'proscribedfunctions': [],
    'proscribedconstructs': ["goto"],
    'proscribedsubstrings': [],
    'pylintoptions': [],
    'requiredconstructs': [],
    'requiredfunctiondefinitions': [],
    'requiredfunctioncalls': [],
    'requiredsubstrings': [],
    'requiretypehints': False,
    'restrictedfiles': {
        'disallow': ['__.*', 'prog.*', 'pytester.py'],
    },
    'restrictedmodules': {
        'builtins': {
            'onlyallow': []
        },
        'imp': {
            'onlyallow': []  
        },
        'importlib': {
            'onlyallow': []  
        },
        'os': {
            'disallow': ['system', '_exit', '_.*']
        },
        'subprocess': {
            'onlyallow': []
        },
        'sys': {
            'disallow': ['_.*']
        },
    },
    'runextra': False,
    'showfeedbackwhenright': False,
    'stdinfromextra': False,
    'strictwhitespace': True,
    'stripmain': False,
    'stripmainifpresent': False,
    'testisbash': False,
    'testre': '',
    'timeout': 5,
    'totaltimeout': 50,
    'suppresspassiveoutput': False,
    'useanswerfortests': False,
    'usesmatplotlib': False,
    'usesnumpy': False,
    'usesubprocess': False,
    'warnifpassiveoutput': True,
}

class TestCase:
    def __init__(self, dict_rep):
        """Construct a testcase from a dictionary representation obtained via JSON"""
        self.testcode = dict_rep['testcode']
        self.stdin = dict_rep['stdin']
        self.expected = dict_rep['expected']
        self.extra = dict_rep['extra']
        self.display = dict_rep['display']
        try:
            self.testtype = int(dict_rep['testtype'])
        except:
            self.testtype = 0
        self.hiderestiffail = bool(int(dict_rep['hiderestiffail']))
        self.useasexample = bool(int(dict_rep['useasexample']))
        self.mark = float(dict_rep['mark'])


# ================= CODE TO DO ALL TWIG PARAMETER PROCESSING ===================

def process_template_params():
    """Extract the template params into a global dictionary PARAMS"""
    global PARAMS
    PARAMS = json.loads("""{{ QUESTION.parameters | json_encode | e('py') }}""")
    checktemplateparams = PARAMS.get('checktemplateparams', True)
    if checktemplateparams:
        unknown_params = set(PARAMS.keys()) - set(KNOWN_PARAMS.keys())
        filtered_params = [param for param in unknown_params if not param.startswith('_')]
        if filtered_params:
            print("Unexpected template parameter(s):", list(sorted(filtered_params)))

    for param_name, default in KNOWN_PARAMS.items():
        if param_name in PARAMS:
            param = PARAMS[param_name]
            if type(param) != type(default) and default is not None:
                print("Template parameter {} has wrong type (expected {})".format(param_name, type(default)))
        else:
            PARAMS[param_name] = default;

    if PARAMS['extra'] == 'stdin':
        PARAMS['stdinfromextra'] = True
    if PARAMS['runextra']:
        PARAMS['extra'] = 'pretest'  # Legacy support
    if PARAMS['timeout'] < 2:
        PARAMS['timeout'] = 2  # Allow 1 extra second freeboard 
    PARAMS['pylintoptions'] = STANDARD_PYLINT_OPTIONS + PARAMS['pylintoptions']
    if PARAMS['allowglobals']:
        PARAMS['pylintoptions'].append("--const-rgx='[a-zA-Z_][a-zA-Z0-9_]{2,30}$'")
    if PARAMS['usesmatplotlib']:
        PARAMS['pylintoptions'].append("--disable=reimported,wrong-import-position,wrong-import-order,unused-import")
    if PARAMS['testisbash']:
        print("testisbash is not implemented for Python")



def get_tests_from_example_table():
    """Return a list of Test objects build from the Example table for this question type"""
    num_rows = len(PARAMS['EXAMPLE_TESTS'])
    tests = []
    for i in range(num_rows):
        testcode = PARAMS['EXAMPLE_TESTS'][i]
        result = PARAMS['EXAMPLE_EXPECTEDS'][i]
        test = TestCase({
            'testcode': testcode,
            'stdin': '',
            'expected': result,
            'extra': '',
            'display': 'show',
            'hiderestiffail': False,
            'useasexample': True,
            'mark': 1.0
        })
        tests.append(test)
    return tests


def build_new_outcome(outcome):
    """Replace the testresults table with customised prologuehtml that
       contains a table more appropriate to this question type.
    """
    GREYS = ['#f0f0f0', '#e0e0e0']
    IS_CORRECT_COL = 4
    
    def style(colour, padding=5, border='border:1px solid darkgray', extrastyle=''):
        """The style to use for a cell"""
        return f'style="background-color:{colour};padding:{padding}px;{border};{extrastyle};"'
        
    locked = get_readonly_cells()
    html = '<table class="table table-bordered" style="width:auto">\n'
    html += f'<tr><th {style(GREYS[0])}>Test</th><th {style(GREYS[0])}>Result</th><th {style(GREYS[0])}>Valid test?</th>'
    for i, row in enumerate(outcome['testresults'][1:]):
        is_correct = row[IS_CORRECT_COL]
        html += '<tr>'
        
        # Extract the testcode and expected from the result table.
        # Colour the cells according to whether they were user-editable and
        # if so according to whether the test was labelled correct or not.
        for result_table_col, test_table_col in [(1, 0), (2, 1)]:
            row_colour = colour = GREYS[(i + 1) % 2]
            if (i, test_table_col) not in locked and not is_correct: 
                # If this is a cell allowing user entry and test is wrong
                colour = '#fcc'  # Red
            html += f'<td {style(colour)}"><pre {style(colour, 0, "")}>{row[result_table_col]}</pre></td>'
        if is_correct:
            html += f'<td {style(row_colour, extrastyle="text-align:center;vertical-align:middle;")}><span style="color: green;">✔</span></td>\n'
        else:
            html += f'<td {style(row_colour, extrastyle="text-align:center;vertical-align:middle;")}><span style="font-size: 16pt; color: red;">✘</span></td>\n'
        
    html += '</table>\n'
    outcome['epiloguehtml'] = html
    if PARAMS['hiderunresulttable']:
        del outcome['testresults']
    return outcome


def get_answer():
    """Return the sample answer"""
    answer_json = """{{QUESTION.answer | e('py')}}""".strip()
    try:
        answer = json.loads(answer_json)['main_answer_code'][0]
    except:
        answer = answer_json  # Assume this is the original solution
    return answer
    
    
def get_readonly_cells():
    """Return a list of the readonly cells"""
    preload = json.loads("""{{QUESTION.answerpreload | e('py')}}""".strip())
    cells = []
    for cell_label in json.loads(preload['cr_readonly_cells'][0]).keys():
        mat = re.match(r'cell-(\d+)-(\d+)', cell_label)
        cells.append((int(mat[1]), int(mat[2])))  # (row, column)
    return cells
    
    
def get_test_patterns():
    """Returns an array of regular expressions to be used by default for
       checking the values of the column 0 (test code) values. An empty
       string means no pattern (i.e. with '???' fields) was used.
    """
    preload = json.loads("""{{QUESTION.answerpreload | e('py')}}""".strip())
    column_0 = preload["test_table_col0"]
    pats = []
    for test in column_0:
        if '???' not in test:
            pats.append('')
        else:
            escaped = re.escape(test)
            pats.append('^' + escaped.replace(r'\?\?\?', '.*') + '$')
    return pats
    
    
def process_global_params():
    """Plug into the PARAMS variable all the "global" parameters from
       the question and its answer (as distinct from the template parameters).
    """
    response = json.loads("""{{ STUDENT_ANSWER | e('py') }}""")
    PARAMS['STUDENT_ANSWER'] = response['main_answer_code'][0].rstrip() + '\n'
    PARAMS['EXAMPLE_TESTS'] = response['test_table_col0']
    PARAMS['EXAMPLE_EXPECTEDS'] = response['test_table_col1']
    PARAMS['SEPARATOR'] = "#<ab@17943918#@>#"
    PARAMS['IS_PRECHECK'] = "{{ IS_PRECHECK }}" == "1"
    PARAMS['QUESTION_PRECHECK'] = {{ QUESTION.precheck }} # Type of precheck: 0 = None, 1 = Empty etc
    PARAMS['ALL_OR_NOTHING'] = "{{ QUESTION.allornothing }}" == "1" # Whether or not all-or-nothing grading is being used
    PARAMS['GLOBAL_EXTRA'] = """{{ QUESTION.globalextra | e('py') }}\n"""
    PARAMS['STEP_INFO'] = json.loads("""{{ QUESTION.stepinfo | json_encode }}""")


def update_test_cases(test_cases, outcome):
    """Return the updated testcases after replacing all empty expected fields with those from the
       given outcome's test_results which must have a column header 'Got'. Non-empty existing expected
       fields are left unchanged.
       If any errors occur, the return value will be None and the outcome parameter will have had its prologuehtml
       value updated to include an error message.
    """
    try:
        results = outcome['testresults']
        col_num = results[0].index('Got')
        for i in range(len(test_cases)):
            if test_cases[i].expected.strip() == '':
                test_cases[i].expected = results[i + 1][col_num]
    except ValueError:
        outcome['prologuehtml'] = "No 'Got' column in result table from which to get testcase expecteds"
        test_cases = None
    except Exception as e:
        outcome['prologuehtml'] = "Unexpected error ({}) extracting testcase expecteds from sample answer output".format(e)
        test_cases = None
    return test_cases


def run_tests(params, test_cases):
    """Run all tests using the supplied function answer (treating this as "STUDENT_ANSWER" 
       in the normal python3 question types).
    """
    new_params = {key: value for key, value in params.items()}
    new_params['IS_PRECHECK'] = False
    new_params['nostylechecks'] = True
    new_params['STUDENT_ANSWER'] = get_answer()
    new_params['running_sample_answer'] = True
    tester = PyTester(new_params, test_cases)
    outcome = tester.test_code()
    return outcome
    
    
ok = True
process_template_params()
process_global_params()
example_tests = get_tests_from_example_table()

outcome = {'fraction': 1.0}
re_patterns = get_test_patterns()

if PARAMS['testre'] or any(pat != '' for pat in re_patterns):
    # Check all non-readonly tests to see if they contain the desired regular expression(s)
    readonlys = get_readonly_cells() # (row, col) values
    bad_tests = []
    for row, test in enumerate(example_tests):
        code = test.testcode.strip()
        if (row, 0) in readonlys:
            continue
        if PARAMS['testre'] and not re.search(PARAMS['testre'], code, re.DOTALL):
            bad_tests.append(code)
        if re_patterns[row] and not re.search(re_patterns[row], code, re.DOTALL):
            print(f"Failed to match pattern: {repr(re_patterns[row])}")
            bad_tests.append(code)
        
    if bad_tests:
        test_is = 'test is' if len(bad_tests) == 1 else 'tests are'
        outcome['fraction'] = 0.0
        outcome['prologuehtml'] = f"""<p>Sorry but the following {test_is} not in the required form.
Please re-read the question to see what was expected. Ask a tutor if you're still unsure.
<ul>"""
        for code in bad_tests:
            outcome['prologuehtml'] += f'<li><pre>{code}</pre></li>\n'
        outcome['prologuehtml'] += '</ol>'
        ok = False
    
if ok and PARAMS['IS_PRECHECK']:
    outcome['prologuehtml'] = "<p class='precheckresult'>Passed 🙂</p>"
    
if ok and not PARAMS['IS_PRECHECK']:
    # Check the Example table cases with the so-called sample answer
    
    outcome = run_tests(PARAMS, example_tests)
    outcome = build_new_outcome(outcome)
    if 'prologuehtml' in outcome:
        outcome['prologuehtml'] = "<h2>ERROR IN QUESTION'S HIDDEN TESTING CODE. PLEASE REPORT</h2>\n" + outcome['prologuehtml']
        ok = False
    elif outcome['fraction'] == 1.0:
        outcome['prologuehtml'] = '<h4>All good!</h4>'
    else:
        outcome['prologuehtml'] = """<b>One or more of your tests is invalid.</b>
<br>The erroneous cells are shaded red in the result table."""
        ok = False
    
print(json.dumps(outcome))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>1</allowmultiplestdins>
    <answer><![CDATA[{"cr_tt_linesperrow":["2"],"cr_readonly_cells":["{}"],"cr_test_table_hdr":["Tests"],"test_table_col0":[""],"test_table_col1":[""],"main_answer_code":[""]}]]></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox>jobesandbox</sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs>50</cputimelimitsecs>
    <memlimitmb>1500</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <extractcodefromjson>0</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>html</uiplugin>
    <uiparameters><![CDATA[{"html_src": "prototypeextra"}]]></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra><![CDATA[<script>
    if (document.getElementsByClassName('qtype-coderunner-test-table').length === 0) {
        const styleElement = document.createElement('style');
        styleElement.textContent = `
div.cr-test-table-wrapper {
    padding: 10px;
}
div.cr-test-table-div {
    background-color: #f7faeb;
    padding: 10px;
}
table.cr-test-table {
    max-width: 800px;
}
td.cr-test-table-cell {
    padding: 2px;
    font-family:monospace;
}
th.cr-test-table-cell {
    padding: 2px;
}
.cr-test-table-button {
    margin:8px;
}
tr.cr-test-table-row {
    margin: 0;
}
.cr-input-element {
    width: 100% !important;
    font-size: smaller;
    overflow: hidden;
    resize: none;
}
.cr-test-table-row-count {
    width: 50px;
}
`;
        styleElement.classList.add('qtype-coderunner-test-table');
        document.head.append(styleElement);
    }
</script>

<script>
    /**
     * Constructor for the TestTable class, which is the builder for
     * the test table. Parameter is the div in which the table will be built.
     */
    function TestTableBuilder(tableDiv) {
        this.HEADERS = ['Test', 'Result'];
        this.NUM_DATA_COLUMNS = 2;  // Future expansion possible to multiple columns?

        // The HTML UI may already have attempted to restore all the UI values into the test table
        // and have failed, as the table hadn't been built at that time. In this case, the leftovers
        // will have been saved in the outer div, so we have to pick them up from there during
        // the build. Otherwise, just use the original value of the textarea.
        // I'm not sure what determines the order of events here as it varies with version of
        // CodeRunner and/or version of Moodle!
        this.outerDiv = document.getElementById("qtype-coderunner-outer-div-___textareaId___");
        let data = this.outerDiv.getAttribute('data-leftovers');
        if (data === null) { // Don't have leftovers. Use original text area contents after all.
            data = document.getElementById("___textareaId___").value;
        }
        this.dataToLoad = data ? JSON.parse(data) : {};
        const sampleName = 'test_table_col0'; // One of the values in dataToLoad.
        this.numRowsToLoad = this.dataToLoad.hasOwnProperty(sampleName) ? this.dataToLoad[sampleName].length : 0;
        this.numRows = Math.max(1, this.numRowsToLoad);

        this.hiddenLineCounter = document.getElementById('___textareaId___-cr-lines-per-row');
        this.linesPerCell = +this.hiddenLineCounter.value;
        this.hiddenTableHeader = document.getElementById('___textareaId___-cr-hidden-table-hdr');
        this.tableHeaderElement = document.getElementById('___textareaId___-cr-test-table-hdr');
        this.tableHeaderElement.textContent = this.hiddenTableHeader.value;
        this.hiddenReadOnlys = document.getElementById('___textareaId___-cr-readonly-cells');
        this.readonlys = JSON.parse(this.hiddenReadOnlys.value);

        // Record if we're in a live question or not so we can display a control panel if not.
        // Also record if we're a preload.
        this.isLiveQuestion = this.outerDiv.closest('.que.coderunner') !== null;
        this.isPreload = tableDiv.closest('#id_answerpreloadhdr') !== null;
        this.tableDiv = tableDiv; // The div in which we're building the table.
    };

    /**
     * Return from the dataLeftovers the value of the ith element of the attribute with the given name
     * if it exists, or the empty string otherwise.
     */
    TestTableBuilder.prototype.getValue = function (name, i) {
        if (this.dataToLoad.hasOwnProperty(name) && this.dataToLoad[name].length > i) {
            return this.dataToLoad[name][i];
        } else {
            return '';
        }
    };

    /**
     * Add to the given tableDiv a test table with the given minimum number of rows.
     * The UI allows adding of rows but does not allow fewer than minimumNumRows.
     */
    TestTableBuilder.prototype.buildTable = function () {
        this.tableDiv.innerHTML = '';  // Reset the div.
        const table = document.createElement('table');
        table.classList.add('table', 'table-bordered', 'cr-test-table');

        table.appendChild(this.tableHead());
        const body = document.createElement('tbody');
        for (let i = 0; i < this.numRows; i++) {
            body.appendChild(this.tableRow(i));
        }
        table.appendChild(body);
        this.tableDiv.appendChild(table);

        // Add the control panel and answer code if not in a live question.
        if (!this.isLiveQuestion) {
            this.tableDiv.appendChild(this.controlPanel());
            if (!this.isPreload) {
                const answerDiv = document.getElementById("___textareaId___-answer-div");
                answerDiv.style = "display:block";
            }
        }
    };

    /**
     * When a table cell is changed within the question edit form,
     * recompute all readonly cells, namely any non-empty cell that
     * do not contain a triple question mark.
     * Parameter is the relevant value of 'this'.
     */
    TestTableBuilder.prototype.setReadonlys = function (t) {
        t.readonlys = {};
        const cells = t.outerDiv.getElementsByClassName('cr-input-element');
        for (let i = 0; i < cells.length; i++) {
            if (cells[i].value && cells[i].value.indexOf('???') === -1) {
                //alert("Non empty " + cells[i].ident + ", value = " + cells[i].value + "'");
                t.readonlys[cells[i].ident] = 1;
            }
        }
        t.hiddenReadOnlys.value = JSON.stringify(t.readonlys);
    }


    // Return a TR element for row number iRow.
    TestTableBuilder.prototype.tableRow = function (iRow) {
        const tr = document.createElement('tr'); // Create the <tr> element
        tr.classList.add('cr-test-table-row');
        for (let iCol = 0; iCol < this.NUM_DATA_COLUMNS; iCol++) {
            const td = document.createElement('td');
            td.classList.add("cr-test-table-cell");

            let inputElement;
            if (this.linesPerCell === 1) {
                inputElement = document.createElement('input'); // Create an <input> element
                inputElement.type = 'text';
            } else {
                inputElement = document.createElement('textarea'); // Create a <textarea> element
                inputElement.rows = this.linesPerCell;
            }

            // Set attributes for the input element
            inputElement.classList.add("cr-input-element", "coderunner-ui-element");
            const name = `test_table_col${iCol}`;
            const ident = `cell-${iRow}-${iCol}`;
            inputElement.name = name;
            inputElement.value = this.getValue(name, iRow);
            inputElement.ident = ident;
            if (this.isLiveQuestion && this.readonlys.hasOwnProperty(ident)) {
                inputElement.disabled = true;
            } else {
                inputElement.style.resize = 'vertical';
            }

            if (!this.isLiveQuestion) {
                // When cell values change in the question edit form, the IDs of all
                // non-empty input elements are recorded as readOnly when in live mode.
                const t = this;
                inputElement.oninput = () => this.setReadonlys(t);
            }

            td.appendChild(inputElement);
            tr.appendChild(td);
        }
        return tr;
    };

    // Return the thead element for the table.
    TestTableBuilder.prototype.tableHead = function () {
        const thead = document.createElement('thead');

        const tr = document.createElement('tr');
        thead.appendChild(tr);

        for (let iCol = 0; iCol < this.NUM_DATA_COLUMNS; iCol++) {
            const th = document.createElement('th');
            th.classList.add('cr-test-table-cell');
            th.textContent = this.HEADERS[iCol];
            tr.appendChild(th);
        }

        return thead;
    }


    // Return a div containing the control panel: addRow and deleteRow buttons.
    TestTableBuilder.prototype.controlPanel = function () {
        function make_button(name) {
            const button = document.createElement('button');
            button.type = 'button';
            button.classList.add("cr-test-table-button");
            button.textContent = name;
            return button;
        }

        const t = this;
        const controlPanelDiv = document.createElement('div');
        controlPanelDiv.classList.add('cr-controlpanel-div');

        const tableHeaderInput = document.createElement('input');
        tableHeaderInput.type = 'text';
        tableHeaderInput.classList.add('cr-test-table-header');
        tableHeaderInput.value = this.hiddenTableHeader.value;
        tableHeaderInput.oninput = function () {
            t.hiddenTableHeader.value = tableHeaderInput.value;
            t.tableHeaderElement.textContent = tableHeaderInput.value;
        }
        const hdrLabel = document.createElement('label');
        hdrLabel.style.display = 'inline';
        hdrLabel.htmlFor = tableHeaderInput.id;
        hdrLabel.textContent = 'Test table header: ';
        controlPanelDiv.append(hdrLabel);
        controlPanelDiv.append(tableHeaderInput);

        const linesPerCellInput = document.createElement('input');
        linesPerCellInput.type = 'text';
        linesPerCellInput.value = this.linesPerCell;

        linesPerCellInput.onchange = function (evt) {
            const newValue = +evt.target.value;
            if (newValue > 0) {
                t.hiddenLineCounter.value = newValue;
                const numRows = t.tableDiv.querySelectorAll('table tbody tr').length;
                t.linesPerCell = newValue;
                t.buildTable(numRows);
            }
        };

        linesPerCellInput.id = "___textareaId___-lines-per-cell";
        linesPerCellInput.classList.add('cr-test-table-row-count');
        const label = document.createElement('label');
        label.style.display = 'inline';
        label.htmlFor = linesPerCellInput.id;
        label.textContent = 'Lines per cell: ';
        controlPanelDiv.append(label);
        controlPanelDiv.append(linesPerCellInput);
        controlPanelDiv.append(document.createElement('br'));

        const deleteButton = make_button('Delete row');
        if (this.numRows === 1) {
            deleteButton.disabled = true;
        }
        deleteButton.onclick = function () {
            const numRows = t.tableDiv.querySelectorAll('table tbody tr').length;
            let lastRow = t.tableDiv.querySelector('table tbody tr:last-child');
            if (numRows > 1) {
                lastRow.remove();
            }
            if (numRows == 1) {
                this.disabled = true;
            }
            t.setReadonlys();
        };
        controlPanelDiv.appendChild(deleteButton);

        const addButton = make_button('Add row');
        addButton.onclick = function (event) {
            const numRows = t.tableDiv.querySelectorAll('table tbody tr').length;
            const lastRow = t.tableDiv.querySelector('table tbody tr:last-child');
            const newLastRow = t.tableRow(numRows);
            lastRow.insertAdjacentElement('afterend', newLastRow);
            event.target.previousElementSibling.disabled = false; // Enable delete button.
        };
        controlPanelDiv.appendChild(addButton);

        return controlPanelDiv;
    };
</script>

<div class="cr-test-table-wrapper">
    <input id='___textareaId___-cr-lines-per-row' type="hidden" class="coderunner-ui-element" name="cr_tt_linesperrow"
        value="2">
    <input id='___textareaId___-cr-readonly-cells' type="hidden" class="coderunner-ui-element" name="cr_readonly_cells"
        value="{}">
    <input id='___textareaId___-cr-hidden-table-hdr' type="hidden" class="coderunner-ui-element"
        name="cr_test_table_hdr" value="Test table">
    <h5 id="___textareaId___-cr-test-table-hdr">Test table</h5>
    <div id='___textareaId___-test-table-div' class='cr-test-table-div'>
    </div>
</div>

<script>
    new TestTableBuilder(document.getElementById('___textareaId___-test-table-div')).buildTable(2);
</script>

<div id="___textareaId___-answer-div" class="cr-answer-div" style="display:none">
    <h5>Code for validating student's tests</h5>
    <textarea class="coderunner-ui-element" id="___textareaId___-ace_field1" name="main_answer_code" spellcheck="false"
        data-params="" data-lang="python3">
    </textarea>
</div>

<script>
    require(['qtype_coderunner/userinterfacewrapper'], function (amd) {
        M.util.js_pending('qtype_coderunner/userinterfacewrapper');
        const taId = "___textareaId___-ace_field1";
        if (document.getElementById(taId) !== null) {
            const aceWrapper = amd.newUiWrapper("ace", taId);
        }
        M.util.js_complete('qtype_coderunner/userinterfacewrapper');
    });


    $(document.getElementById('___textareaId___' + '_wrapper')).css('resize', 'none');

</script>]]></prototypeextra>
    <testcases>
<file name="__author_solution.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgZ29vZCI+CiAgICA8YSBjbGFzcz0iYnRuIGJ0bi1saW5rIGNvZGVydW5uZXItc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0NGQyI+U2hvdyBhdXRob3IncyBzb2x1dGlvbjwvYT4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvZGVydW5uZXItYXV0aG9ycy1zb2x1dGlvbiBjb2xsYXBzZSIgZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTo4cHgiPgogICAgPHByZSBjbGFzcz0iY29kZS1oaWdobGlnaHQiPiVzPC9wcmU+CjwvZGl2Pgo8c2NyaXB0PgogICAgd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkID0gd2luZG93LmNvZGVydW5uZXJfc29sdXRpb25fbGlua19jbGlja2VkIHx8IGZ1bmN0aW9uKHNyYykgewogICAgICAgIHZhciBxdWVzdGlvbiA9IHNyYy50YXJnZXQuY2xvc2VzdCgnZGl2LnNwZWNpZmljZmVlZGJhY2snKTsKICAgICAgICB2YXIgc29sdXRpb25fZGl2ID0gcXVlc3Rpb24uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29kZXJ1bm5lci1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNvbHV0aW9uLWxpbmsnKVswXTsKICAgICAgICB2YXIgY29kZSA9IHF1ZXN0aW9uLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvZGUtaGlnaGxpZ2h0JylbMF07CgogICAgICAgIGlmICghY29kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2hhcy1oaWdobGlnaHQnKSkgewogICAgICAgICAgICB2YXIgaGlnaGxpZ2h0ID0gd2luZG93LmFjZS5yZXF1aXJlKCJhY2UvZXh0L3N0YXRpY19oaWdobGlnaHQiKTsKICAgICAgICAgICAgaGlnaGxpZ2h0KGNvZGUsIHsKICAgICAgICAgICAgICAgIG1vZGU6ICJhY2UvbW9kZS9weXRob24iLAogICAgICAgICAgICAgICAgc2hvd0d1dHRlcjogZmFsc2UKICAgICAgICAgICAgfSwgZnVuY3Rpb24oaGlnaGxpZ2h0ZWQpIHsKICAgICAgICAgICAgICAgIGNvZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWNlX3N0YXRpY19oaWdobGlnaHQnKVswXS5zdHlsZVsnZm9udC1zaXplJ10gPSAiMTRweCI7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb2RlLmNsYXNzTGlzdC5hZGQoJ2hhcy1oaWdobGlnaHQnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYgKCEkKHNvbHV0aW9uX2RpdikuaGFzQ2xhc3MoJ2NvbGxhcHNpbmcnKSkgewogICAgICAgICAgICBpZiAoJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIikgPT09ICJ0cnVlIikgewogICAgICAgICAgICAgICAgc29sdXRpb25fbGluay5pbm5lckhUTUwgPSAiU2hvdyBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuaGlkZSgzMDApOwogICAgICAgICAgICAgICAgJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5zaG93KDMwMCk7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuYXR0cigiZXhwYW5kZWQiLCAidHJ1ZSIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgdmFyIGNvZGVydW5uZXJfYWxsX2xpbmtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29kZXJ1bm5lci1zb2x1dGlvbi1saW5rJyk7CiAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXJ1bm5lcl9hbGxfbGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZWwgPSBjb2RlcnVubmVyX2FsbF9saW5rc1tpXTsKICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGFzLWNsaWNrLWhhbmRsZXInKSkgewogICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHdpbmRvdy5jb2RlcnVubmVyX3NvbHV0aW9uX2xpbmtfY2xpY2tlZCk7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1jbGljay1oYW5kbGVyJyk7CiAgICAgICAgfQogICAgfSAgICAKPC9zY3JpcHQ+Cgo=</file>
<file name="__author_solution_scrambled.html" path="/" encoding="base64">PGRpdiBjbGFzcz0iY29kZXJ1bm5lci10ZXN0LXJlc3VsdHMgYmFkIj4KICAgIDxhIGNsYXNzPSJidG4gYnRuLWxpbmsgY29kZXJ1bm5lci1zY3JhbWJsZWQtc29sdXRpb24tbGluayIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0ZDQyI+U2hvdyBzY3JhbWJsZWQgYXV0aG9yJ3Mgc29sdXRpb248L2E+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uIGNvbGxhcHNlIiBleHBhbmRlZD0iZmFsc2UiIHN0eWxlPSJtYXJnaW4tYm90dG9tOjhweCI+CiAgICA8cHJlIGNsYXNzPSJjb2RlLWhpZ2hsaWdodCI+JXM8L3ByZT4KPC9kaXY+CjxzY3JpcHQ+CiAgICB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgPSB3aW5kb3cuY29kZXJ1bm5lcl9zb2x1dGlvbl9saW5rX2NsaWNrZWQgfHwgZnVuY3Rpb24oc3JjKSB7CiAgICAgICAgdmFyIHF1ZXN0aW9uID0gc3JjLnRhcmdldC5jbG9zZXN0KCdkaXYuc3BlY2lmaWNmZWVkYmFjaycpOwogICAgICAgIHZhciBzb2x1dGlvbl9kaXYgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1hdXRob3JzLXNvbHV0aW9uJylbMF07CiAgICAgICAgdmFyIHNvbHV0aW9uX2xpbmsgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJylbMF07CiAgICAgICAgdmFyIGNvZGUgPSBxdWVzdGlvbi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlLWhpZ2hsaWdodCcpWzBdOwoKICAgICAgICBpZiAoIWNvZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdoYXMtaGlnaGxpZ2h0JykpIHsKICAgICAgICAgICAgdmFyIGhpZ2hsaWdodCA9IHdpbmRvdy5hY2UucmVxdWlyZSgiYWNlL2V4dC9zdGF0aWNfaGlnaGxpZ2h0Iik7CiAgICAgICAgICAgIGhpZ2hsaWdodChjb2RlLCB7CiAgICAgICAgICAgICAgICBtb2RlOiAiYWNlL21vZGUvcHl0aG9uIiwKICAgICAgICAgICAgICAgIHNob3dHdXR0ZXI6IGZhbHNlCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGhpZ2hsaWdodGVkKSB7CiAgICAgICAgICAgICAgICBjb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjZV9zdGF0aWNfaGlnaGxpZ2h0JylbMF0uc3R5bGVbJ2ZvbnQtc2l6ZSddID0gIjE0cHgiOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29kZS5jbGFzc0xpc3QuYWRkKCdoYXMtaGlnaGxpZ2h0Jyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmICghJChzb2x1dGlvbl9kaXYpLmhhc0NsYXNzKCdjb2xsYXBzaW5nJykpIHsKICAgICAgICAgICAgaWYgKCQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIpID09PSAidHJ1ZSIpIHsKICAgICAgICAgICAgICAgIHNvbHV0aW9uX2xpbmsuaW5uZXJIVE1MID0gIlNob3cgc2NyYW1ibGVkIGF1dGhvcidzIHNvbHV0aW9uIjsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5jb2xsYXBzZSgnaGlkZScpOwogICAgICAgICAgICAgICAgJChzb2x1dGlvbl9kaXYpLmF0dHIoImV4cGFuZGVkIiwgImZhbHNlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzb2x1dGlvbl9saW5rLmlubmVySFRNTCA9ICJIaWRlIHNjcmFtYmxlZCBhdXRob3IncyBzb2x1dGlvbiI7CiAgICAgICAgICAgICAgICAkKHNvbHV0aW9uX2RpdikuY29sbGFwc2UoJ3Nob3cnKTsKICAgICAgICAgICAgICAgICQoc29sdXRpb25fZGl2KS5hdHRyKCJleHBhbmRlZCIsICJ0cnVlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICB2YXIgY29kZXJ1bm5lcl9hbGxfbGlua3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2RlcnVubmVyLXNjcmFtYmxlZC1zb2x1dGlvbi1saW5rJyk7CiAKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXJ1bm5lcl9hbGxfbGlua3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZWwgPSBjb2RlcnVubmVyX2FsbF9saW5rc1tpXTsKICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGFzLWNsaWNrLWhhbmRsZXInKSkgewogICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHdpbmRvdy5jb2RlcnVubmVyX3NvbHV0aW9uX2xpbmtfY2xpY2tlZCk7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy1jbGljay1oYW5kbGVyJyk7CiAgICAgICAgfQogICAgfSAgICAKPC9zY3JpcHQ+Cgo=</file>
<file name="__languagetask.py" path="/" encoding="base64">IiIiVGhlIGdlbmVyaWMgTGFuZ3VhZ2VUYXNrLCBzdWJjbGFzc2VzIG9mIHdoaWNoIG1hbmFnZSBjb21waWxpbmcgYW5kIGV4ZWN1dGluZwogICBjb2RlIGluIGEgcGFydGljdWxhciBsYW5ndWFnZS4KIiIiCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpXQVRDSERPR19GUkVFQk9BUkQgPSAxCgpjbGFzcyBDb21waWxlRXJyb3IoRXhjZXB0aW9uKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKToKICAgICAgICBFeGNlcHRpb24uX19pbml0X18oc2VsZiwgZXJyb3JfbWVzc2FnZSkKCgpjbGFzcyBSdW5FcnJvcihFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGVycm9yX21lc3NhZ2U9JycpOgogICAgICAgIEV4Y2VwdGlvbi5fX2luaXRfXyhzZWxmLCBlcnJvcl9tZXNzYWdlKQoKY2xhc3MgTGFuZ3VhZ2VUYXNrOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmFtcywgY29kZT1Ob25lKToKICAgICAgICAiIiJJbml0aWFsaXNlIHRoZSBvYmplY3QsIHJlY29yZGluZyB0aGUgcGFyYW1ldGVycyB0aGF0IHdpbGwgY29udHJvbCBjb21waWxhdGlvbiBhbmQKICAgICAgICAgICBydW5uaW5nIHBsdXMgdGhlIGNvZGUgaWYgc3VwcGxpZWQuIENvZGUgbWF5IGJlIGFsdGVybmF0aXZlbHkgYmUgc3VwcGxpZWQgbGF0ZXIgYnkKICAgICAgICAgICBjYWxscyB0byBzZXRfY29kZS4KICAgICAgICAgICBzZWxmLnBhcmFtcyBpcyB0aGUgZGljdGlvbmFyeSBvZiB0ZW1wbGF0ZSAmIGdsb2JhbCBwYXJhbWV0ZXJzIC0gbGFuZ3VhZ2Ugc3BlY2lmaWMuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5wYXJhbXMgPSBwYXJhbXMKICAgICAgICBzZWxmLmNvZGUgPSBjb2RlCiAgICAgICAgc2VsZi5leGVjdXRhYmxlX2J1aWx0ID0gRmFsc2UKICAgICAgICBzZWxmLmNvbXBpbGVfZXJyb3JfbWVzc2FnZSA9IE5vbmUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gMAogICAgICAgIHNlbGYuc3RkZXJyID0gJycKICAgICAgICBzZWxmLnN0ZG91dCA9ICcnCiAgICAgICAgc2VsZi5zdGFydF90aW1lID0gZGF0ZXRpbWUubm93KCkKICAgICAgICBzZWxmLnRpbWVkX291dCA9IEZhbHNlCiAgICAgICAgaWYgJ3RvdGFsdGltZW91dCcgbm90IGluIHBhcmFtczoKICAgICAgICAgICAgc2VsZi5wYXJhbXNbJ3RvdGFsdGltZW91dCddID0gMzAgIyBTZWNzCgogICAgZGVmIHNlY29uZHNfcmVtYWluaW5nKHNlbGYpOgogICAgICAgICIiIlRoZSBudW1iZXIgb2Ygc2Vjb25kcyBvZiBleGVjdXRpb24gdGltZSByZW1haW5pbmcgYmVmb3JlIHRoZSB3YXRjaGRvZyB0aW1lciBnb2VzIG9mZi4KICAgICAgICAgICBUaGUgd2F0Y2hkb2cgdGltZXIgZ29lcyBvZmYgMSBzZWNvbmQgYmVmb3JlIHJ1bmd1YXJkIGtpbGxzIHRoZSBqb2IgKGFzIGRldGVybWluZWQgYnkgdGhlICd0aW1lb3V0JyBwYXJhbWV0ZXIpLgogICAgICAgICIiIgogICAgICAgIHRfZWxhcHNlZCA9IChkYXRldGltZS5ub3coKSAtIHNlbGYuc3RhcnRfdGltZSkudG90YWxfc2Vjb25kcygpCiAgICAgICAgcmV0dXJuIHNlbGYucGFyYW1zWyd0b3RhbHRpbWVvdXQnXSAtIHRfZWxhcHNlZCAtIFdBVENIRE9HX0ZSRUVCT0FSRAoKICAgIGRlZiBzZXRfY29kZShzZWxmLCBjb2RlLCBlcnJvcl9tZXNzYWdlX29mZnNldD0wKToKICAgICAgICAiIiJTZXQgdGhlIGNvZGUgdG8gYmUgdXNlZCBmb3Igc3Vic2VxdWVudCBjb21waWxpbmcgYW5kIHJ1bm5pbmcuIFRoZSBvcHRpb25hbCBlcnJvcl9tZXNzYWdlX29mZnNldAogICAgICAgICAgIGlzIGEgbnVtYmVyIHRvIGJlIHN1YnRyYWN0ZWQgZnJvbSBhbnkgZXJyb3IgbWVzc2FnZXMgZ2VuZXJhdGVkIGJ5IGNvbXBpbGUgYW5kIHJ1bl9jb2RlIGNhbGxzLgogICAgICAgICAgIEV4YWN0bHkgaG93IChvciBldmVuICdpZicpIGl0IGlzIHVzZWQgaXMgbGFuZ3VhZ2UgZGVwZW5kZW50LgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29kZSA9IGNvZGUKICAgICAgICBzZWxmLmVycm9yX21lc3NhZ2Vfb2Zmc2V0ID0gZXJyb3JfbWVzc2FnZV9vZmZzZXQKCiAgICBkZWYgY29tcGlsZShzZWxmLCBtYWtlX2V4ZWN1dGFibGU9RmFsc2UpOgogICAgICAgICIiIkNvbXBpbGUgdGhlIGN1cnJlbnRseSBzZXQgY29kZSwgZWl0aGVyIHRvIGFuIG9iamVjdCBmaWxlIG9yCiAgICAgICAgICAgdG8gYW4gZXhlY3V0YWJsZSBmaWxlIGRlcGVuZGluZyBvbiB0aGUgZ2l2ZW4gbWFrZV9leGVjdXRhYmxlIHBhcmFtZXRlci4KICAgICAgICAgICBBZGp1c3QgYW55IGVycm9yIG1lc3NhZ2UgYnkgc3VidHJhY3RpbmcgZXJyb3JfbWVzc2FnZV9vZmZzZXQuCiAgICAgICAgICAgUmFpc2UgQ29tcGlsZUVycm9yIGlmIHRoZSBjb2RlIGRvZXMgbm90CiAgICAgICAgICAgY29tcGlsZSwgd2l0aCB0aGUgY29tcGlsYXRpb24gZXJyb3IgbWVzc2FnZSB3aXRoaW4gdGhlIGV4Y2VwdGlvbgogICAgICAgICAgIGFuZCBhbHNvIHJlY29yZGVkIGluIHNlbGYuY29tcGlsZV9lcnJvcl9tZXNzYWdlLgogICAgICAgICAgIE5vIHJldHVybiB2YWx1ZS4KICAgICAgICAiIiIKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJjb21waWxlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIpCgogICAgZGVmIGRpc2NhcmRfZXhlY3V0YWJsZShzZWxmKToKICAgICAgICAiIiJDYWxsZWQgaWYgc29tZXRoaW5nIGJyZWFrcyBpbiB0aGUgZXhlY3V0YWJsZSBhbmQgaXQgd2lsbCBuZWVkIHJlYnVpbGRpbmcKICAgICAgICAgICAod2l0aCBkaWZmZXJlbnQgc291cmNlLCBwcmVzdW1hYmx5KQogICAgICAgICIiIgogICAgICAgIHNlbGYuZXhlY3V0YWJsZV9idWlsdCA9IEZhbHNlCgogICAgZGVmIHJ1bl9jb2RlKHNlbGYsIHN0YW5kYXJkX2lucHV0PU5vbmUsIGJhc2hfY29tbWFuZD1Ob25lKToKICAgICAgICAiIiJSdW4gdGhlIGNvZGUgaW4gdGhlIGV4ZWN1dGFibGUgcHJvZ3JhbSB0aGF0IGEgY2FsbCB0byBjb21waWxlIGlzIGFzc3VtZWQKICAgICAgICAgICB0byBoYXZlIGNyZWF0ZWQsIHVzaW5nIHRoZSBnaXZlbiBzdGFuZGFyZCBpbnB1dC4KICAgICAgICAgICBJZiBhIGJhc2hfY29tbWFuZCBpcyBzdXBwbGllZCBpdCB1c2VkIGFzIGdpdmVuLgogICAgICAgICAgIE90aGVyd2lzZSB0aGUgY29tbWFuZCB0byBiZSBleGVjdXRlZCBpcyB0aGUgY29tcGlsZWQgZXhlY3V0YWJsZS4KICAgICAgICAgICBSZXR1cm5zIGEgdHVwbGUgb2YgdGhlIG91dHB1dCBmcm9tIHRoZQogICAgICAgICAgIHJ1biBhbmQgYSBzdGRlcnIgKG9yIGEgZGVyaXZhdGl2ZSB0aGVyZW9mKSBzdHJpbmcuIFRob3NlIHR3byB2YWx1ZXMKICAgICAgICAgICBhcmUgYWxzbyByZWNvcmRlZCBpbiBzZWxmLnN0ZG91dCBhbmQgc2VsZi5zdGRlcnIgcmVzcGVjdGl2ZWx5LgogICAgICAgICIiIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoInJ1bl9jb2RlIG5vdCBpbXBsZW1lbnRlZCBieSBjb25jcmV0ZSBjbGFzcyIp</file>
<file name="__plottools.py" path="/" encoding="base64">IiIiRGVmaW5lIHN1cHBvcnQgZnVuY3Rpb25zIGZvciB0ZXN0aW5nIG9mIG1hdHBsb3RsaWIgcXVlc3Rpb25zLgogICBUaGUgbWFpbiBmdW5jdGlvbiBpcyBwcmludF9wbG90X2luZm8sIHdoaWNoIGRpc3BsYXlzIHN1aXRhYmx5IGZvcm1hdHRlZAogICBkYXRhIGFib3V0IHRoZSBjdXJyZW50IG1hdHBsb3RsaWIgcGxvdC4KCiAgIFRoaXMgbW9kdWxlIHdvcmtzIG9ubHkgaWYgaW1wb3J0ZWQgKmFmdGVyKiBhIGNhbGwgdG8gbWF0cGxvdGxpYmcudXNlKCJBZ2ciKSBoYXMKICAgYmVlbiBkb25lLgoiIiIKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdApmcm9tIG1hdHBsb3RsaWIgaW1wb3J0IGNvbG9ycyBhcyBjb2xvcnMKZnJvbSBzY2lweSBpbXBvcnQgaW50ZXJwb2xhdGUKCkRFRkFVTFRfUEFSQU1TID0gewogICAgJ3hfc2FtcGxlcyc6IE5vbmUsICAjIEEgbGlzdCBvZiB4LXZhbHVlcyBhdCB3aGljaCB5IHZhbHVlcyBzaG91bGQgYmUgaW50ZXJwb2xhdGVkLgogICAgJ2Jhcl9pbmRpY2VzJzogTm9uZSwgICMgQSBsaXN0IG9mIHRoZSAwLW9yaWdpbiBiYXIgaW5kaWNlcyB0byByZXBvcnQgb24uIE5vbmUgZm9yIGFsbCBiYXJzLgogICAgJ3Nob3dfeGxpbSc6IEZhbHNlLCAgIyBUcnVlIHRvIGRpc3BsYXkgdGhlIHgtYXhpcyBsaW1pdHMKICAgICdzaG93X3lsaW0nOiBGYWxzZSwgICMgVHJ1ZSB0byBkaXNwbGF5IHRoZSB5LWF4aXMgbGltaXRzCiAgICAnc2hvd19jb2xvdXInOiBGYWxzZSwgICMgVHJ1ZSB0byByZXBvcnQgbGluZS9tYXJrZXIgY29sb3VyCiAgICAnc2hvd194dGlja2xhYmVscyc6IE5vbmUsICAjIFRydWUgdG8gZGlzcGxheSB4LXRpY2sgbGFiZWxzIChkZWZhdWx0cyBUcnVlIGZvciBiYXJzLCBGYWxzZSBvdGhlcndpc2UpCiAgICAnc2hvd195dGlja2xhYmVscyc6IEZhbHNlLCAgIyBUcnVlIHRvIGRpc3BsYXkgeS10aWNrIGxhYmVscwogICAgJ3Nob3dfeHRpY2tzJzogRmFsc2UsICAjIFRydWUgdG8gZGlzcGxheSB4LXRpY2sgbnVtZXJpYyB2YWx1ZXMKICAgICdzaG93X3l0aWNrcyc6IEZhbHNlLCAgIyBUcnVlIHRvIGRpc3BsYXkgeS10aWNrIG51bWVyaWMgdmFsdWVzCiAgICAnc2hvd19iYXJ4JzogVHJ1ZSwgICMgVHJ1ZSB0byBwcmludCB0aGUgeC1jb29yZGluYXRlcyBvZiBhbGwgYmFycwogICAgJ3Nob3dfbGluZWxhYmVscyc6IE5vbmUsICAjIFRydWUgdG8gc2hvdyBsaW5lIGxhYmVscywgZGVmYXVsdCBpcyBUcnVlIGlmIHRoZXJlJ3MgYSBsZWdlbmQgZWxzZSBGYWxzZQogICAgJ3NvcnRfcG9pbnRzJzogRmFsc2UsICAjIFRydWUgdG8gc29ydCBkYXRhIGJ5IHggdGhlbiB5LgogICAgJ2ZpcnN0X251bV9wb2ludHMnOiA1LCAgIyBOdW1iZXIgb2YgcG9pbnRzIHRvIHByaW50IGF0IHRoZSBzdGFydCBvZiB0aGUgcG9pbnQgbGlzdC4KICAgICdsYXN0X251bV9wb2ludHMnOiA1LCAgIyBOdW1iZXIgb2YgcG9pbnRzIHRvIHByaW50IGF0IHRoZSBlbmQgb2YgdGhlIHBvaW50IGxpc3QuCiAgICAnZmxvYXRfcHJlY2lzaW9uJzogKDEsIDEpLCAgIyBOdW0gZGlnaXRzIHRvIGRpc3BsYXkgYWZ0ZXIgZGVjaW1hbCBwb2ludCBmb3IgeCBhbmQgeSB2YWx1ZXMgcmVzcAogICAgJ21heF9sYWJlbF9sZW5ndGgnOiA2MCwgICMgVXNlIG11bHRpbGluZSBkaXNwbGF5IGlmIHRpY2sgbGFiZWwgc3RyaW5nIGxlbmd0aCBleGNlZWRzIHRoaXMKICAgICdsaW5lc190b19wcmludCc6IE5vbmUsICAjIElmIG5vbi1Ob25lLCBhIGxpc3Qgb2YgaW5kaWNlcyBvZiBsaW5lcyB0byBwcmludCAoMCBpcyBmaXJzdCBsaW5lKS4KICAgICdsaW5lX2luZm9fb25seSc6IEZhbHNlLCAgIyBUcnVlIHRvIHN1cHByZXNzIGFsbCBleGNlcHQgdGhlIGxpbmUvYmFyL3BvaW50cyBpbmZvCn0KCgpjbGFzcyBQbG90Q2hlY2tlcjoKICAgICIiIldyYXBwZXIgZm9yIGFsbCB0aGUgaW50ZXJuYWwgbWV0aG9kcyB1c2VkIHRvIHByaW50IHBsb3QgaW5mby4iIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyYW1zX2RpY3QpOgogICAgICAgICIiIkluaXRpYWxpc2Ugd2l0aCBhIHN1YnNldCBvZiB0aGUgb3B0aW9ucyBsaXN0ZWQgYWJvdmUiIiIKICAgICAgICBzZWxmLnBhcmFtcyA9IERFRkFVTFRfUEFSQU1TLmNvcHkoKQogICAgICAgIHNlbGYucGFyYW1zLnVwZGF0ZShwYXJhbXNfZGljdCkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgbXlfaW50ZXJwb2xhdGUoZGF0YSwgeHMpOgogICAgICAgICIiIlJldHVybiB0aGUgc3BsaW5lIGludGVycG9sYXRlZCBsaXN0IG9mICh4LCB5KSB2YWx1ZXMgYXQgYWJzY2lzc2EgeHMsIGdpdmVuCiAgICAgICAgICAgYSBsaXN0IG9mICh4LCB5KSBwYWlycwogICAgICAgICIiIgoKICAgICAgICBkZWYgbGluZWFyKHgsIHhhLCB5YSwgeGIsIHliKToKICAgICAgICAgICAgcmV0dXJuIHlhICsgKHggLSB4YSkgLyAoeGIgLSB4YSkgKiAoeWIgLSB5YSkKCiAgICAgICAgaWYgbGVuKGRhdGFbOiwgMF0pID09IDI6CiAgICAgICAgICAgIHgwLCB5MCA9IGRhdGFbMF1bMF0sIGRhdGFbMF1bMV0KICAgICAgICAgICAgeDEsIHkxID0gZGF0YVstMV1bMF0sIGRhdGFbLTFdWzFdCiAgICAgICAgICAgIHJldHVybiBbKHgsIGxpbmVhcih4LCB4MCwgeTAsIHgxLCB5MSkpIGZvciB4IGluIHhzXQogICAgICAgIGVsc2U6ICAjIGN1YmljCiAgICAgICAgICAgIHRjayA9IGludGVycG9sYXRlLnNwbHJlcChkYXRhWzosIDBdLCBkYXRhWzosIDFdLCBzPTApICAjIEN1YmljIHNwbGluZSBpbnRlcnBvbGF0b3IKICAgICAgICAgICAgcmV0dXJuIHppcCh4cywgaW50ZXJwb2xhdGUuc3BsZXYoeHMsIHRjaykpICAjIEV2YWx1YXRlIGF0IHJlcXVpcmVkIHggdmFsdWVzCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGZtdF9mbG9hdCh2YWx1ZSwgZGlnaXRzX3ByZWNpc2lvbj0yKToKICAgICAgICAiIiJSZXR1cm4gYSBmb3JtYXR0ZWQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyIHRvIHRoZSBwcmVjaXNpb24gc3BlY2lmaWVkLAogICAgICAgICAgIHJlcGxhY2luZyAtMCB3aXRoIDAiIiIKICAgICAgICBmb3JtYXRfc3RyaW5nID0gZicue2RpZ2l0c19wcmVjaXNpb259ZicKICAgICAgICBzID0gZm9ybWF0KHZhbHVlLCBmb3JtYXRfc3RyaW5nKQogICAgICAgIGlmIHMuc3RhcnRzd2l0aCgnLScpIGFuZCBmbG9hdChzKSA9PSAwLjA6CiAgICAgICAgICAgIHMgPSBzWzE6XSAgIyBTdHJpcCBvZmYgdGhlIG1pbnVzIHNpZ24uCiAgICAgICAgcmV0dXJuIHMKCiAgICBkZWYgZm10X2Zsb2F0X3goc2VsZiwgdmFsdWUpOgogICAgICAgICIiIlJldHVybiBhIGZvcm1hdHRlZCB4LXZhbHVlIHVzaW5nIHRoZSBwcmVjaXNpb24gc3BlY2lmaWVkIGZvciB0aGUgeC1heGVzLAogICAgICAgICAgIGV4Y2VwdCBpZiB2YWx1ZSBpcyBhIHN0cmluZywgcmV0dXJuIGl0IHVuY2hhbmdlZC4KICAgICAgICAiIiIKICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHIpOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICBlbHNlOgogICAgICAgICAgICB4X3ByZWNpc2lvbiA9IHNlbGYucGFyYW1zWydmbG9hdF9wcmVjaXNpb24nXVswXQogICAgICAgICAgICByZXR1cm4gc2VsZi5mbXRfZmxvYXQodmFsdWUsIHhfcHJlY2lzaW9uKQoKICAgIGRlZiBmbXRfZmxvYXRfeShzZWxmLCB2YWx1ZSk6CiAgICAgICAgIiIiUmV0dXJuIGEgZm9ybWF0dGVkIHgtdmFsdWUgdXNpbmcgdGhlIHByZWNpc2lvbiBzcGVjaWZpZWQgZm9yIHRoZSB5LWF4ZXMsCiAgICAgICAgICAgZXhjZXB0IGlmIHZhbHVlIGlzIGEgc3RyaW5nLCByZXR1cm4gaXQgdW5jaGFuZ2VkLgogICAgICAgICIiIgogICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cik6CiAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHhfcHJlY2lzaW9uID0gc2VsZi5wYXJhbXNbJ2Zsb2F0X3ByZWNpc2lvbiddWzFdCiAgICAgICAgICAgIHJldHVybiBzZWxmLmZtdF9mbG9hdCh2YWx1ZSwgeF9wcmVjaXNpb24pCgogICAgZGVmIGZtdF9mbG9hdF9wYWlyKHNlbGYsIHAsIHByZWNpc2lvbj1Ob25lKToKICAgICAgICAiIiJBIGZvcm1hdHRlZCAoeCwgeSkgcG9pbnQgb3Igb3RoZXIgcGFpciBvZiBmbG9hdGluZy1wb2ludCBudW1iZXJzLgogICAgICAgICAgIEJ5IGRlZmF1bHQsIHVzZSBmbG9hdF9wcmVjaXNpb25feCBhbmQgZmxvYXRfcHJlY2lzaW9uX3kgZm9yIHRoZQogICAgICAgICAgIGZpcnN0IGFuZCBzZWNvbmQgbnVtYmVycyByZXNwLCBlbHNlIHVzZSBwcmVjaXNpb24gaWYgZ2l2ZW4uCiAgICAgICAgIiIiCiAgICAgICAgaWYgcHJlY2lzaW9uIGlzIE5vbmU6CiAgICAgICAgICAgIHhfcHJlY2lzaW9uID0gc2VsZi5wYXJhbXNbJ2Zsb2F0X3ByZWNpc2lvbiddWzBdCiAgICAgICAgICAgIHlfcHJlY2lzaW9uID0gc2VsZi5wYXJhbXNbJ2Zsb2F0X3ByZWNpc2lvbiddWzFdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgeF9wcmVjaXNpb24gPSB5X3ByZWNpc2lvbiA9IHByZWNpc2lvbgogICAgICAgIHJldHVybiBmIih7c2VsZi5mbXRfZmxvYXQocFswXSwgeF9wcmVjaXNpb24pfSwge3NlbGYuZm10X2Zsb2F0KHBbMV0sIHlfcHJlY2lzaW9uKX0pIgoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBub3JtYWxpc2VfY29sb3VyKGNvbG91cik6CiAgICAgICAgIiIiR2l2ZW4gYSBtYXRwbG90bGliIGNvbG91ciwgY29udmVydCB0byBhIHN0YW5kYXJpc2VkIGZvcm1hdCIiIgogICAgICAgIHJnYiA9IGNvbG9ycy50b19yZ2IoY29sb3VyKQogICAgICAgIHJldHVybiBmIlJHQih7cmdiWzBdOjAuMmZ9LCB7cmdiWzFdOjAuMmZ9LCB7cmdiWzJdOjAuMmZ9KSIKCiAgICBkZWYgcHJpbnRfbGluZShzZWxmLCBsaW5lLCB4c2FtcGxlcyk6CiAgICAgICAgIiIiUHJpbnQgdGhlIGluZm8gZm9yIHRoZSBnaXZlbiBsaW5lIiIiCiAgICAgICAgaWYgc2VsZi5wYXJhbXNbJ3Nob3dfY29sb3VyJ106CiAgICAgICAgICAgIHByaW50KCJDb2xvcjoiLCBzZWxmLm5vcm1hbGlzZV9jb2xvdXIobGluZS5nZXRfY29sb3IoKSkpCiAgICAgICAgcHJpbnQoIk1hcmtlcjoiLCBsaW5lLmdldF9tYXJrZXIoKSkKICAgICAgICBwcmludCgiTGluZSBzdHlsZToiLCBsaW5lLmdldF9saW5lc3R5bGUoKSkKICAgICAgICBsYWJlbCA9IGxpbmUuZ2V0X2xhYmVsKCkKICAgICAgICBpZiBsYWJlbCBhbmQgc2VsZi5wYXJhbXNbJ3Nob3dfbGluZWxhYmVscyddOgogICAgICAgICAgICBwcmludCgiTGFiZWw6IiwgbGFiZWwpCiAgICAgICAgZGF0YSA9IGxpbmUuZ2V0X3h5ZGF0YSgpCgogICAgICAgIGlmIHNlbGYucGFyYW1zWydzb3J0X3BvaW50cyddOgogICAgICAgICAgICBkYXRhID0gbnAuYXJyYXkoc29ydGVkKFtbcm93WzBdLCByb3dbMV1dIGZvciByb3cgaW4gZGF0YV0pKQogICAgICAgICAgICBwcmludCgiUGxvdHRlZCBkYXRhLCBhZnRlciBzb3J0aW5nIC4uLiIpCgogICAgICAgIGlmIHhzYW1wbGVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwcmludChmIkZpcnN0IHBvaW50OiB7c2VsZi5mbXRfZmxvYXRfcGFpcihkYXRhWzBdKX0iKQogICAgICAgICAgICBwcmludChmIkxhc3QgcG9pbnQ6IHtzZWxmLmZtdF9mbG9hdF9wYWlyKGRhdGFbLTFdKX0iKQogICAgICAgICAgICBwcmludChmIkludGVycG9sYXRpbmcgbGluZSBhdCBzZWxlY3RlZCB4IHZhbHVlczoiKQogICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSBzZWxmLm15X2ludGVycG9sYXRlKGRhdGEsIHhzYW1wbGVzKQogICAgICAgICAgICBmb3IgcCBpbiBpbnRlcnBvbGF0ZWQ6CiAgICAgICAgICAgICAgICBwcmludCgnICAgJywgc2VsZi5mbXRfZmxvYXRfcGFpcihwKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChmIk51bSBwb2ludHM6IHtsZW4oZGF0YSl9IikKICAgICAgICAgICAgbiA9IG1pbihsZW4oZGF0YSksIHNlbGYucGFyYW1zWydmaXJzdF9udW1fcG9pbnRzJ10pCiAgICAgICAgICAgIGlmIG46CiAgICAgICAgICAgICAgICBwb2ludHMgPSAnXG4gICAgJy5qb2luKHNlbGYuZm10X2Zsb2F0X3BhaXIocCkgZm9yIHAgaW4gZGF0YVs6bl0pCiAgICAgICAgICAgICAgICBpZiBuIDwgbGVuKGRhdGEpOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiRmlyc3Qge259IHBvaW50czpcbiAgICB7cG9pbnRzfSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiICAgIHtwb2ludHN9IikKICAgICAgICAgICAgbGFzdF9uID0gbWluKGxlbihkYXRhKSAtIG4sIHNlbGYucGFyYW1zWydsYXN0X251bV9wb2ludHMnXSkKICAgICAgICAgICAgaWYgbGFzdF9uOgogICAgICAgICAgICAgICAgcG9pbnRzID0gJ1xuICAgICcuam9pbihzZWxmLmZtdF9mbG9hdF9wYWlyKHApIGZvciBwIGluIGRhdGFbLWxhc3RfbjpdKQogICAgICAgICAgICAgICAgcHJpbnQoZiJMYXN0IHtsYXN0X259IHBvaW50czpcbiAgICB7cG9pbnRzfSIpCgogICAgZGVmIHByaW50X2xpbmVzKHNlbGYsIHN1YnBsb3QsIHhzYW1wbGVzKToKICAgICAgICAiIiJQcmludCBhbGwgc2VsZWN0ZWQgbGluZXMgaW4gdGhlIHBsb3Qgc2hvd2luZyB5IHZhbHVlcyBpbnRlcnBsb2xhdGVkIGF0IHRoZSB4IHNhbXBsZSBwb2ludHMsCiAgICAgICAgICAgaWYgZ2l2ZW4uIE90aGVyd2lzZSwgcHJpbnQganVzdCB0aGUgZmlyc3QgZmlyc3RfbnVtX3BvaW50cyBhbmQgbGFzdCBsYXN0X251bV9wb2ludHMuIEFsc28KICAgICAgICAgICBzaG93IGxpbmUgY29sb3VycyBpZiB0aGUgc2hvd19jb2xvdXIgcGFyYW1ldGVyIGlzIFRydWUuCiAgICAgICAgIiIiCiAgICAgICAgbGluZXMgPSBzdWJwbG90LmdldF9saW5lcygpCiAgICAgICAgaWYgbGVuKGxpbmVzKSA9PSAwOgogICAgICAgICAgICBwcmludCgiTm8gcGxvdHRlZCBsaW5lcyBmb3VuZCIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGxpbmVfaW5kaWNlcyA9IHNlbGYucGFyYW1zWydsaW5lc190b19wcmludCddCiAgICAgICAgaWYgbGluZV9pbmRpY2VzIGlzIE5vbmU6CiAgICAgICAgICAgIHdhbnRlZF9saW5lcyA9IGxpbmVzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2FudGVkX2xpbmVzID0gW10KICAgICAgICAgICAgZm9yIGkgaW4gbGluZV9pbmRpY2VzOgogICAgICAgICAgICAgICAgaWYgaSA+PSBsZW4obGluZXMpOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiQ2FuJ3QgZGlzcGxheSBpbmZvIGZvciBwbG90IHtpfSAtIG5vIHN1Y2ggcGxvdCEiKQogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICB3YW50ZWRfbGluZXMuYXBwZW5kKGxpbmVzW2ldKQoKICAgICAgICBtdWx0aWxpbmVzID0gbGVuKHdhbnRlZF9saW5lcykgPiAxCiAgICAgICAgaWYgbXVsdGlsaW5lczoKICAgICAgICAgICAgcHJpbnQoZiJEaXNwbGF5aW5nIGluZm8gZm9yIHtsZW4od2FudGVkX2xpbmVzKX0gbGluZXMiKQogICAgICAgIGZvciBpLCBsaW5lIGluIGVudW1lcmF0ZSh3YW50ZWRfbGluZXMsIDEpOgogICAgICAgICAgICBpZiBtdWx0aWxpbmVzOgogICAgICAgICAgICAgICAgcHJpbnQoZiJMaW5lIHtpfToiKQogICAgICAgICAgICBzZWxmLnByaW50X2xpbmUobGluZSwgeHNhbXBsZXMpCiAgICAgICAgICAgIGlmIG11bHRpbGluZXM6CiAgICAgICAgICAgICAgICBwcmludCgpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGluX3JhbmdlKGxhYmVscywgbGltaXRzKToKICAgICAgICAiIiJSZXR1cm4gdGhlIGxpc3Qgb2YgYXhpcyBsYWJlbHMsIGZpbHRlcmVkIHRvIGluY2x1ZGUgb25seSB0aG9zZSB3aXRoaW4KICAgICAgICAgICB0aGUgZ2l2ZW4gbGltaXRzIChtaW4sIG1heCkuIElmIGFueSBvZiB0aGUgYXhpcyBsYWJlbHMgYXJlIG5vbi1udW1lcmljCiAgICAgICAgICAgdGhlIGxpc3QgaXMgcmV0dXJuZWQgdW5jaGFuZ2VkLgogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpcHBlZF9sYWJlbHMgPSBbXQogICAgICAgICAgICBmb3IgcyBpbiBsYWJlbHM6CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHMsIHN0cik6CiAgICAgICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgn4oiSJywgJy0nKQogICAgICAgICAgICAgICAgaWYgbGltaXRzWzBdIDw9IGZsb2F0KHMpIDw9IGxpbWl0c1sxXToKICAgICAgICAgICAgICAgICAgICBjbGlwcGVkX2xhYmVscy5hcHBlbmQocykKICAgICAgICAgICAgcmV0dXJuIGNsaXBwZWRfbGFiZWxzCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBsYWJlbHMKCiAgICBkZWYgcHJpbnRfYmFycyhzZWxmLCBzdWJwbG90KToKICAgICAgICAiIiJQcmludCBhIGxpc3Qgb2YgYWxsIGJhcnMgaWYgdGhlIGJhcl9pbmRpY2VzIHBhcmFtIGlzIE5vbmUgb3IgYSBsaXN0IG9mIHRoZQogICAgICAgICAgIGJhcnMgd2l0aCB0aGUgZ2l2ZW4gaW5kaWNlcywgb3RoZXJ3aXNlLgogICAgICAgICIiIgogICAgICAgIHByaW50KCJCYXJzOiIpCiAgICAgICAgYmFycyA9IHN1YnBsb3QucGF0Y2hlcwogICAgICAgIGlmIGJhcnMgYW5kIHNlbGYucGFyYW1zWydzaG93X2NvbG91ciddOgogICAgICAgICAgICBwcmludChmIkZpcnN0IGJhciBjb2xvdXI6IHtzZWxmLm5vcm1hbGlzZV9jb2xvdXIoYmFyc1swXS5nZXRfZmFjZWNvbG9yKCkpfSIpCiAgICAgICAgYmFyX2luZGljZXMgPSBzZWxmLnBhcmFtc1snYmFyX2luZGljZXMnXQogICAgICAgIGlmIGJhcl9pbmRpY2VzIGlzIE5vbmU6CiAgICAgICAgICAgIGJhcl9pbmRpY2VzID0gcmFuZ2UoMCwgbGVuKHN1YnBsb3QucGF0Y2hlcykpCiAgICAgICAgZm9yIGkgaW4gYmFyX2luZGljZXM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGJhciA9IHN1YnBsb3QucGF0Y2hlc1tpXQogICAgICAgICAgICAgICAgeSA9IGJhci5nZXRfaGVpZ2h0KCkKICAgICAgICAgICAgICAgIGlmIHNlbGYucGFyYW1zWydzaG93X2JhcngnXToKICAgICAgICAgICAgICAgICAgICB4ID0gYmFyLmdldF94eSgpWzBdICsgYmFyLmdldF93aWR0aCgpIC8gMgogICAgICAgICAgICAgICAgICAgIGJhcl9zcGVjID0gZiJCYXJ7aX06IHggPSB7c2VsZi5mbXRfZmxvYXRfeCh4KX0sIGhlaWdodCA9IHtzZWxmLmZtdF9mbG9hdF95KHkpfSIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgYmFyX3NwZWMgPSBmIkJhcntpfTogaGVpZ2h0ID0ge3NlbGYuZm10X2Zsb2F0X3koeSl9IgogICAgICAgICAgICAgICAgcHJpbnQoYmFyX3NwZWMpCiAgICAgICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOgogICAgICAgICAgICAgICAgcHJpbnQoZiJCYXJ7aX0gbm90IGZvdW5kLiBOdW1iZXIgb2YgYmFycyA9IHtsZW4oc3VicGxvdC5wYXRjaGVzKX0iKQogICAgICAgICAgICAgICAgYnJlYWsKCiAgICBkZWYgdGlja19sYWJlbF90ZXh0KHNlbGYsIGxhYmVscyk6CiAgICAgICAgIiIiUmV0dXJuIGEgc3RyaW5nIHN1aXRhYmxlIGZvciBkaXNwbGF5aW5nIHRpY2sgbGFiZWxzIiIiCiAgICAgICAgbGFiZWxfdGV4dCA9ICcsICcuam9pbihsYWJlbHMpCiAgICAgICAgaWYgbGVuKGxhYmVsX3RleHQpID4gc2VsZi5wYXJhbXNbJ21heF9sYWJlbF9sZW5ndGgnXToKICAgICAgICAgICAgbGFiZWxfdGV4dCA9ICdcbicuam9pbihsYWJlbHMpCiAgICAgICAgcmV0dXJuIGxhYmVsX3RleHQKCiAgICBkZWYgcHJpbnRfdGlja3Moc2VsZiwgc3VicGxvdCwgeGxpbSwgeWxpbSk6CiAgICAgICAgIiIiUHJpbnQgdGljayBhbmQgdGlja2xhYmVsIGluZm8gZm9yIHRoZSBnaXZlbiBzdWJwbG90LiIiIgogICAgICAgIGlmIHNlbGYucGFyYW1zWydzaG93X3h0aWNrcyddOgogICAgICAgICAgICB4X3RpY2tzID0gW3NlbGYuZm10X2Zsb2F0X3gocG9zKSBmb3IgcG9zIGluIHN1YnBsb3QuZ2V0X3h0aWNrcygpXQogICAgICAgICAgICBwcmludCgnWC1heGlzIHRpY2tzIGF0ICcsICcsICcuam9pbih4X3RpY2tzKSkKCiAgICAgICAgaWYgc2VsZi5wYXJhbXNbJ3Nob3dfeHRpY2tsYWJlbHMnXToKICAgICAgICAgICAgeF90aWNrX2xhYmVscyA9IFtsYWJlbC5nZXRfdGV4dCgpIGZvciBsYWJlbCBpbiBzdWJwbG90LmdldF94dGlja2xhYmVscygpXQogICAgICAgICAgICAjIEEgcHJvYmxlbSBoZXJlIGlzIHRoYXQgaW4gYSBjYWxsIHRvIGJhcihheGlzX2xhYmVscywgYmFyX2hlaWdodHMpIHRoZSBjYWxsIHRvIGdldF94dGlja2xhYmVscyBkb2Vzbid0CiAgICAgICAgICAgICMgcmV0dXJuIHRoZSBhY3R1YWwgbGFiZWxzLCBidXQgcmF0aGVyIHRoZWlyIHRpY2sgbG9jYXRpb25zLiBJIGNhbid0IGZpbmQgYSB3b3JrYXJvdW5kIGZvciB0aGlzLgogICAgICAgICAgICBpZiBhbGwobGFiZWwuc3RyaXAoKSA9PSAnJyBmb3IgbGFiZWwgaW4geF90aWNrX2xhYmVscyk6CiAgICAgICAgICAgICAgICB4X3RpY2tfbGFiZWxzID0gW3NlbGYuZm10X2Zsb2F0X3gocG9zKSBmb3IgcG9zIGluIHN1YnBsb3QuZ2V0X3h0aWNrcygpXQogICAgICAgICAgICB4X3RpY2tfbGFiZWxzID0gc2VsZi5pbl9yYW5nZSh4X3RpY2tfbGFiZWxzLCB4bGltKQogICAgICAgICAgICBwcmludCgnWC1heGlzIHRpY2sgbGFiZWxzOicpCiAgICAgICAgICAgIHByaW50KHNlbGYudGlja19sYWJlbF90ZXh0KHhfdGlja19sYWJlbHMpKQoKICAgICAgICBpZiBzZWxmLnBhcmFtc1snc2hvd195dGlja3MnXToKICAgICAgICAgICAgeV90aWNrcyA9IFtzZWxmLmZtdF9mbG9hdF95KHBvcykgZm9yIHBvcyBpbiBzdWJwbG90LmdldF95dGlja3MoKV0KICAgICAgICAgICAgcHJpbnQoJ1xuWS1heGlzIHRpY2tzIGF0ICcsICcsICcuam9pbih5X3RpY2tzKSkKCiAgICAgICAgaWYgc2VsZi5wYXJhbXNbJ3Nob3dfeXRpY2tsYWJlbHMnXToKICAgICAgICAgICAgeV90aWNrX2xhYmVscyA9IFtsYWJlbC5nZXRfdGV4dCgpIGZvciBsYWJlbCBpbiBzdWJwbG90LmdldF95dGlja2xhYmVscygpXQogICAgICAgICAgICBpZiBhbGwobGFiZWwuc3RyaXAoKSA9PSAnJyBmb3IgbGFiZWwgaW4geV90aWNrX2xhYmVscyk6CiAgICAgICAgICAgICAgICB5X3RpY2tfbGFiZWxzID0gW3NlbGYuZm10X2Zsb2F0X3kocG9zKSBmb3IgcG9zIGluIHN1YnBsb3QuZ2V0X3l0aWNrcygpXQogICAgICAgICAgICB5X3RpY2tfbGFiZWxzID0gc2VsZi5pbl9yYW5nZSh5X3RpY2tfbGFiZWxzLCB5bGltKQogICAgICAgICAgICBwcmludCgiXG5ZLWF4aXMgdGljayBsYWJlbHM6IikKICAgICAgICAgICAgcHJpbnQoc2VsZi50aWNrX2xhYmVsX3RleHQoeV90aWNrX2xhYmVscykpCgogICAgZGVmIHByaW50X2F4aXNfaW5mbyhzZWxmLCBzdWJwbG90KToKICAgICAgICAiIiJQcmludCB0aGUgYXhpcyBpbmZvIGZvciB0aGUgZ2l2ZW4gc3VicGxvdCIiIgoKICAgICAgICBwcmludCgiWC1heGlzIGxhYmVsOiAne30nIi5mb3JtYXQoc3VicGxvdC5nZXRfeGxhYmVsKCkpKQogICAgICAgIHByaW50KCJZLWF4aXMgbGFiZWw6ICd7fSciLmZvcm1hdChzdWJwbG90LmdldF95bGFiZWwoKSkpCiAgICAgICAgeGdyaWRsaW5lcyA9IHN1YnBsb3QuZ2V0X3hncmlkbGluZXMoKQogICAgICAgIHlncmlkbGluZXMgPSBzdWJwbG90LmdldF95Z3JpZGxpbmVzKCkKICAgICAgICBncmlkeF9vbiA9IGxlbih4Z3JpZGxpbmVzKSA+IDAgYW5kIGJvb2woeGdyaWRsaW5lc1swXS5nZXRfdmlzaWJsZSgpKQogICAgICAgIGdyaWR5X29uID0gbGVuKHlncmlkbGluZXMpID4gMCBhbmQgYm9vbCh5Z3JpZGxpbmVzWzBdLmdldF92aXNpYmxlKCkpCiAgICAgICAgcHJpbnQoZiIoeCwgeSkgZ3JpZCBsaW5lcyBlbmFibGVkOiAoe2dyaWR4X29ufSwge2dyaWR5X29ufSkiKQogICAgICAgIHhsaW0gPSBzdWJwbG90LmdldF94bGltKCkKICAgICAgICB5bGltID0gc3VicGxvdC5nZXRfeWxpbSgpCiAgICAgICAgaWYgc2VsZi5wYXJhbXNbJ3Nob3dfeGxpbSddOgogICAgICAgICAgICBwcmludChmIlgtYXhpcyBsaW1pdHM6IHtzZWxmLmZtdF9mbG9hdF9wYWlyKHhsaW0sIHByZWNpc2lvbj1zZWxmLnBhcmFtc1snZmxvYXRfcHJlY2lzaW9uJ11bMF0pfSIpCiAgICAgICAgaWYgc2VsZi5wYXJhbXNbJ3Nob3dfeWxpbSddOgogICAgICAgICAgICBwcmludChmIlktYXhpcyBsaW1pdHM6IHtzZWxmLmZtdF9mbG9hdF9wYWlyKHlsaW0sIHByZWNpc2lvbj1zZWxmLnBhcmFtc1snZmxvYXRfcHJlY2lzaW9uJ11bMV0pfSIpCiAgICAgICAgc2VsZi5wcmludF90aWNrcyhzdWJwbG90LCB4bGltLCB5bGltKQoKICAgICAgICBpZiBzdWJwbG90LmdldF9sZWdlbmQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcHJpbnQoZiJMZWdlbmQ6IFRydWUiKQogICAgICAgIHByaW50KCkKCiAgICBkZWYgcHJpbnRfc3VicGxvdF9pbmZvKHNlbGYsIGRhdGFfdHlwZSwgc3VicGxvdCwgdGl0bGUpOgogICAgICAgICIiIlByaW50IHRoZSBpbmZvIGZvciBhIHNpbmdsZSBnaXZlbiBzdWJwbG90LgogICAgICAgICAgIElmIHRoZSBkYXRhX3R5cGUgaXMgJ2xpbmVzJyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgeF9zYW1wbGVzCiAgICAgICAgICAgY2FuIGJlIHVzZWQgdG8gc3BlY2lmeSB4IHZhbHVlcyBhdCB3aGljaCB0aGUgbGluZSBzaG91bGQgYmUgc2FtcGxlZC4KICAgICAgICAgICBJZiB0aGUgZGF0YV90eXBlIGlzIGxpbmVzLCB0aGUgeC10aWNrIGxhYmVscyBhcmUgc2hvd24gdW5sZXNzCiAgICAgICAgICAgdGhlIHNob3dfeHRpY2tsYWJlbHMgcGFyYW1ldGVycyBpcyBleHBsaWNpdGx5IHNldCB0byBGYWxzZS4KICAgICAgICAiIiIKICAgICAgICBpZiBub3Qgc2VsZi5wYXJhbXNbJ2xpbmVfaW5mb19vbmx5J106CiAgICAgICAgICAgIGlmIHNlbGYucGFyYW1zWydzaG93X3h0aWNrbGFiZWxzJ10gaXMgTm9uZSBhbmQgZGF0YV90eXBlID09ICdiYXJzJzoKICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zWydzaG93X3h0aWNrbGFiZWxzJ10gPSBUcnVlCiAgICAgICAgICAgIGhhc19sZWdlbmQgPSBzdWJwbG90LmdldF9sZWdlbmQoKSBpcyBub3QgTm9uZQogICAgICAgICAgICBpZiBoYXNfbGVnZW5kIGFuZCBzZWxmLnBhcmFtc1snc2hvd19saW5lbGFiZWxzJ10gaXMgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zWydzaG93X2xpbmVsYWJlbHMnXSA9IFRydWUKICAgICAgICAgICAgcHJpbnQoIlBsb3QgdGl0bGU6ICd7fSciLmZvcm1hdCh0aXRsZSkpCiAgICAgICAgICAgIHNlbGYucHJpbnRfYXhpc19pbmZvKHN1YnBsb3QpCgogICAgICAgIGlmIGRhdGFfdHlwZSA9PSAncG9pbnRzJzoKICAgICAgICAgICAgc2VsZi5wcmludF9saW5lcyhzdWJwbG90LCBOb25lKQogICAgICAgIGVsaWYgZGF0YV90eXBlID09ICdsaW5lcyc6CiAgICAgICAgICAgIHNlbGYucHJpbnRfbGluZXMoc3VicGxvdCwgc2VsZi5wYXJhbXNbJ3hfc2FtcGxlcyddKQogICAgICAgIGVsaWYgZGF0YV90eXBlID09ICdiYXJzJzoKICAgICAgICAgICAgc2VsZi5wcmludF9iYXJzKHN1YnBsb3QpCgogICAgZGVmIHByaW50X2luZm8oc2VsZiwgZGF0YV90eXBlKToKICAgICAgICAiIiJQcmludCBhbGwgdGhlIGluZm9ybWF0aW9uIGZvciB0aGUgY3VycmVudCBwbG90LiBkYXRhX3R5cGUKICAgICAgICAgICBtdXN0IGJlICdwb2ludHMnLCAnbGluZXMnIG9yICdiYXJzJy4KICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGF4ZXMgPSBwbHQuZ2NmKCkuZ2V0X2F4ZXMoKQogICAgICAgICAgICB0ZXh0cyA9IHBsdC5nY2YoKS50ZXh0cwogICAgICAgICAgICBpZiBub3Qgc2VsZi5wYXJhbXNbJ2xpbmVfaW5mb19vbmx5J106CiAgICAgICAgICAgICAgICBpZiBsZW4oYXhlcykgPiAxOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYiRmlndXJlIGhhcyB7bGVuKGF4ZXMpfSBzdWJwbG90cyIpCiAgICAgICAgICAgICAgICBpZiBsZW4odGV4dHMpICE9IDA6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJTdXB0aXRsZToge3RleHRzWzBdLmdldF90ZXh0KCl9XG4iKQogICAgICAgICAgICBmb3IgaSwgY3VycmVudF9heGVzIGluIGVudW1lcmF0ZShheGVzLCAxKToKICAgICAgICAgICAgICAgIGlmIGxlbihheGVzKSA+IDEgYW5kIG5vdCBzZWxmLnBhcmFtc1snbGluZV9pbmZvX29ubHknXToKICAgICAgICAgICAgICAgICAgICBwcmludChmIlN1YnBsb3Qge2l9XG4tLS0tLS0tLS0iKQogICAgICAgICAgICAgICAgc3VicGxvdCA9IGN1cnJlbnRfYXhlcy5heGVzCiAgICAgICAgICAgICAgICB0aXRsZSA9IGN1cnJlbnRfYXhlcy50aXRsZS5nZXRfdGV4dCgpCiAgICAgICAgICAgICAgICBzZWxmLnByaW50X3N1YnBsb3RfaW5mbyhkYXRhX3R5cGUsIHN1YnBsb3QsIHRpdGxlKQogICAgICAgICAgICAgICAgaWYgbGVuKGF4ZXMpID4gMSBhbmQgbm90IHNlbGYucGFyYW1zWydsaW5lX2luZm9fb25seSddOgogICAgICAgICAgICAgICAgICAgIHByaW50KDQwICogIj0iKQogICAgICAgICAgICAgICAgICAgIHByaW50KCkKCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludCgiRmFpbGVkIHRvIGdldCBwbG90IGluZm86IiwgcmVwcihlKSkKICAgICAgICAgICAgdHJhY2ViYWNrLnByaW50X2V4Y2VwdGlvbihlKQoKCmRlZiBwcmludF9wbG90X2luZm8oZGF0YV90eXBlLCAqKmt3cGFyYW1zKToKICAgICIiIk91dHB1dCBrZXkgYXR0cmlidXRlcyBvZiBjdXJyZW50IHBsb3QsIGFzIGRlZmluZWQgYnkgcGx0LmdjYSgpLgogICAgICAgZGF0YV90eXBlIG11c3QgYmUgb25lIG9mICdwb2ludHMnLCAnbGluZXMnIG9yICdiYXJzJywgdG8gcHJpbnQgdGhlCiAgICAgICBhcHByb3ByaWF0ZSB0eXBlIG9mIGRhdGEuCiAgICAgICBGb3IgdmFsdWVzIG9mIHBvc3NpYmxlIGtleXdvcmQgcGFyYW1ldGVycyBzZWUgREVGQVVMVF9QQVJBTVMgZGVjbGFyYXRpb24KICAgICIiIgoKICAgIHVua25vd25fcGFyYW1zID0gc2V0KGt3cGFyYW1zKSAtIHNldChERUZBVUxUX1BBUkFNUykKICAgIGlmIHVua25vd25fcGFyYW1zOgogICAgICAgIHByaW50KGYiVW5rbm93biBwYXJhbWV0ZXIocykgcGFzc2VkIHRvIHByaW50X3Bsb3RfaW5mbzogeycsICcuam9pbih1bmtub3duX3BhcmFtcyl9IikKICAgICAgICByZXR1cm4KCiAgICBjaGVja2VyID0gUGxvdENoZWNrZXIoa3dwYXJhbXMpCiAgICBjaGVja2VyLnByaW50X2luZm8oZGF0YV90eXBlKQo=</file>
<file name="__pystylechecker.py" path="/" encoding="base64"></file>
<file name="__pytask.py" path="/" encoding="base64"></file>
<file name="pytester.py" path="/" encoding="base64"></file>
<file name="__resulttable.py" path="/" encoding="base64"></file>
<file name="__tester.py" path="/" encoding="base64"></file>
<file name="__watchdog.py" path="/" encoding="base64">IyEvdXNyL2Jpbi9weXRob24KIyBmaWxlOiB3YXRjaGRvZy5weQojIGxpY2Vuc2U6IE1JVCBMaWNlbnNlCiMgRnJvbSBodHRwczovL2R6b25lLmNvbS9hcnRpY2xlcy9zaW1wbGUtcHl0aG9uLXdhdGNoZG9nLXRpbWVyCgppbXBvcnQgc2lnbmFsCgpjbGFzcyBXYXRjaGRvZyhFeGNlcHRpb24pOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRpbWUpOgogICAgICAgICIiIlNldCB1cCBhIHRpbWVyIGFsYXJtIHRvIGdvIG9mZiBpbiAndGltZScgc2Vjcy4iIiIKICAgICAgICBzZWxmLnRpbWUgPSB0aW1lCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICAiIiJDYWxsZWQgb24gZW50ZXJpbmcgYSAnd2l0aCcgYmxvY2siIiIKICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdBTFJNLCBzZWxmLmhhbmRsZXIpCiAgICAgICAgc2lnbmFsLmFsYXJtKHNlbGYudGltZSkKCiAgICBkZWYgX19leGl0X18oc2VsZiwgdHlwZSwgdmFsdWUsIHRyYWNlYmFjayk6CiAgICAgICAgIiIiRXhpdGluZyB0aGUgd2l0aCBibG9jay4gQ2FuY2VsIHRoZSB3YXRjaGRvZyIiIgogICAgICAgIHNpZ25hbC5hbGFybSgwKQoKICAgIGRlZiBoYW5kbGVyKHNlbGYsIHNpZ251bSwgZnJhbWUpOgogICAgICAgICIiIkFsYXJtIHdlbnQgb2ZmLiBSYWlzZSBXYXRjaGRvZyBleGNlcHRpb24iIiIKICAgICAgICByYWlzZSBzZWxmCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuICJXYXRjaGRvZyB0aW1lciBleHBpcmVkIGFmdGVyIHt9IHNlY3MiLmZvcm1hdChzZWxmLnRpbWUpCg==</file>
    </testcases>
  </question>

</quiz>